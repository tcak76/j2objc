//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/security/InvalidKeyException.java
//

#include "../../J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaSecurityInvalidKeyException")
#ifdef RESTRICT_JavaSecurityInvalidKeyException
#define INCLUDE_ALL_JavaSecurityInvalidKeyException 0
#else
#define INCLUDE_ALL_JavaSecurityInvalidKeyException 1
#endif
#undef RESTRICT_JavaSecurityInvalidKeyException

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaSecurityInvalidKeyException_) && (INCLUDE_ALL_JavaSecurityInvalidKeyException || defined(INCLUDE_JavaSecurityInvalidKeyException))
#define JavaSecurityInvalidKeyException_

#define RESTRICT_JavaSecurityKeyException 1
#define INCLUDE_JavaSecurityKeyException 1
#include "../../java/security/KeyException.h"

/*!
 @brief <code>InvalidKeyException</code> indicates exceptional conditions, caused by an
 invalid key.
 */
@interface JavaSecurityInvalidKeyException : JavaSecurityKeyException

#pragma mark Public

/*!
 @brief Constructs a new instance of <code>InvalidKeyException</code>.
 */
- (instancetype)init;

/*!
 @brief Constructs a new instance of <code>InvalidKeyException</code> with the given
 message.
 @param msg
 the detail message for this exception.
 */
- (instancetype)initWithNSString:(NSString *)msg;

/*!
 @brief Constructs a new instance of <code>InvalidKeyException</code> with the given
 message and the cause.
 @param message
 the detail message for this exception.
 @param cause
 the exception which is the cause for this exception.
 */
- (instancetype)initWithNSString:(NSString *)message
                 withNSException:(NSException *)cause;

/*!
 @brief Constructs a new instance of <code>InvalidKeyException</code> with the cause.
 @param cause
 the exception which is the cause for this exception.
 */
- (instancetype)initWithNSException:(NSException *)cause;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecurityInvalidKeyException)

FOUNDATION_EXPORT void JavaSecurityInvalidKeyException_initWithNSString_(JavaSecurityInvalidKeyException *self, NSString *msg);

FOUNDATION_EXPORT JavaSecurityInvalidKeyException *new_JavaSecurityInvalidKeyException_initWithNSString_(NSString *msg) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecurityInvalidKeyException *create_JavaSecurityInvalidKeyException_initWithNSString_(NSString *msg);

FOUNDATION_EXPORT void JavaSecurityInvalidKeyException_init(JavaSecurityInvalidKeyException *self);

FOUNDATION_EXPORT JavaSecurityInvalidKeyException *new_JavaSecurityInvalidKeyException_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecurityInvalidKeyException *create_JavaSecurityInvalidKeyException_init();

FOUNDATION_EXPORT void JavaSecurityInvalidKeyException_initWithNSString_withNSException_(JavaSecurityInvalidKeyException *self, NSString *message, NSException *cause);

FOUNDATION_EXPORT JavaSecurityInvalidKeyException *new_JavaSecurityInvalidKeyException_initWithNSString_withNSException_(NSString *message, NSException *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecurityInvalidKeyException *create_JavaSecurityInvalidKeyException_initWithNSString_withNSException_(NSString *message, NSException *cause);

FOUNDATION_EXPORT void JavaSecurityInvalidKeyException_initWithNSException_(JavaSecurityInvalidKeyException *self, NSException *cause);

FOUNDATION_EXPORT JavaSecurityInvalidKeyException *new_JavaSecurityInvalidKeyException_initWithNSException_(NSException *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecurityInvalidKeyException *create_JavaSecurityInvalidKeyException_initWithNSException_(NSException *cause);

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityInvalidKeyException)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaSecurityInvalidKeyException")
