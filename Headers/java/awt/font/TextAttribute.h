//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/awt/font/TextAttribute.java
//

/*!
 @author Ilya S. Okomin
 @version $Revision$
 */
#include "../../../J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaAwtFontTextAttribute")
#ifdef RESTRICT_JavaAwtFontTextAttribute
#define INCLUDE_ALL_JavaAwtFontTextAttribute 0
#else
#define INCLUDE_ALL_JavaAwtFontTextAttribute 1
#endif
#undef RESTRICT_JavaAwtFontTextAttribute

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaAwtFontTextAttribute_) && (INCLUDE_ALL_JavaAwtFontTextAttribute || defined(INCLUDE_JavaAwtFontTextAttribute))
#define JavaAwtFontTextAttribute_

#define RESTRICT_JavaTextAttributedCharacterIterator 1
#define INCLUDE_JavaTextAttributedCharacterIterator_Attribute 1
#include "../../../java/text/AttributedCharacterIterator.h"

@class JavaLangBoolean;
@class JavaLangFloat;
@class JavaLangInteger;

/*!
 @brief The TextAttribute class defines attribute keys and attribute values
 for text rendering.
 Each TextAttributes should have the following
 information:
 <ul>
 <li>key name;</li>
 <li>valid values;</li>
 <li>relevant constants;</li>
 <li>default action if the attribute is absent;</li>
 <li>default action's description.</li>
 </ul>
 */
@interface JavaAwtFontTextAttribute : JavaTextAttributedCharacterIterator_Attribute

+ (JavaAwtFontTextAttribute *)BACKGROUND;

+ (JavaAwtFontTextAttribute *)BIDI_EMBEDDING;

+ (JavaAwtFontTextAttribute *)CHAR_REPLACEMENT;

+ (JavaAwtFontTextAttribute *)FAMILY;

+ (JavaAwtFontTextAttribute *)FONT;

+ (JavaAwtFontTextAttribute *)FOREGROUND;

+ (JavaAwtFontTextAttribute *)INPUT_METHOD_HIGHLIGHT;

+ (JavaAwtFontTextAttribute *)INPUT_METHOD_UNDERLINE;

+ (JavaAwtFontTextAttribute *)JUSTIFICATION;

+ (JavaLangFloat *)JUSTIFICATION_FULL;

+ (JavaLangFloat *)JUSTIFICATION_NONE;

+ (JavaAwtFontTextAttribute *)KERNING;

+ (JavaLangInteger *)KERNING_ON;

+ (JavaAwtFontTextAttribute *)LIGATURES;

+ (JavaLangInteger *)LIGATURES_ON;

+ (JavaAwtFontTextAttribute *)NUMERIC_SHAPING;

+ (JavaAwtFontTextAttribute *)POSTURE;

+ (JavaLangFloat *)POSTURE_REGULAR;

+ (JavaLangFloat *)POSTURE_OBLIQUE;

+ (JavaAwtFontTextAttribute *)RUN_DIRECTION;

+ (JavaLangBoolean *)RUN_DIRECTION_LTR;

+ (JavaLangBoolean *)RUN_DIRECTION_RTL;

+ (JavaAwtFontTextAttribute *)SIZE;

+ (JavaAwtFontTextAttribute *)STRIKETHROUGH;

+ (JavaLangBoolean *)STRIKETHROUGH_ON;

+ (JavaAwtFontTextAttribute *)SUPERSCRIPT;

+ (JavaLangInteger *)SUPERSCRIPT_SUB;

+ (JavaLangInteger *)SUPERSCRIPT_SUPER;

+ (JavaAwtFontTextAttribute *)SWAP_COLORS;

+ (JavaLangBoolean *)SWAP_COLORS_ON;

+ (JavaAwtFontTextAttribute *)TRACKING;

+ (JavaLangFloat *)TRACKING_LOOSE;

+ (JavaLangFloat *)TRACKING_TIGHT;

+ (JavaAwtFontTextAttribute *)TRANSFORM;

+ (JavaAwtFontTextAttribute *)UNDERLINE;

+ (JavaLangInteger *)UNDERLINE_ON;

+ (JavaLangInteger *)UNDERLINE_LOW_ONE_PIXEL;

+ (JavaLangInteger *)UNDERLINE_LOW_TWO_PIXEL;

+ (JavaLangInteger *)UNDERLINE_LOW_DOTTED;

+ (JavaLangInteger *)UNDERLINE_LOW_GRAY;

+ (JavaLangInteger *)UNDERLINE_LOW_DASHED;

+ (JavaAwtFontTextAttribute *)WEIGHT;

+ (JavaLangFloat *)WEIGHT_EXTRA_LIGHT;

+ (JavaLangFloat *)WEIGHT_LIGHT;

+ (JavaLangFloat *)WEIGHT_DEMILIGHT;

+ (JavaLangFloat *)WEIGHT_REGULAR;

+ (JavaLangFloat *)WEIGHT_SEMIBOLD;

+ (JavaLangFloat *)WEIGHT_MEDIUM;

+ (JavaLangFloat *)WEIGHT_DEMIBOLD;

+ (JavaLangFloat *)WEIGHT_BOLD;

+ (JavaLangFloat *)WEIGHT_HEAVY;

+ (JavaLangFloat *)WEIGHT_EXTRABOLD;

+ (JavaLangFloat *)WEIGHT_ULTRABOLD;

+ (JavaAwtFontTextAttribute *)WIDTH;

+ (JavaLangFloat *)WIDTH_CONDENSED;

+ (JavaLangFloat *)WIDTH_SEMI_CONDENSED;

+ (JavaLangFloat *)WIDTH_REGULAR;

+ (JavaLangFloat *)WIDTH_SEMI_EXTENDED;

+ (JavaLangFloat *)WIDTH_EXTENDED;

#pragma mark Protected

/*!
 @brief Instantiates a new TextAttribute with the specified name.
 @param name the name of TextAttribute.
 */
- (instancetype)initWithNSString:(NSString *)name;

@end

J2OBJC_STATIC_INIT(JavaAwtFontTextAttribute)

/*!
 @brief The BACKGROUND text attribute.
 */
inline JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_get_BACKGROUND();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_BACKGROUND;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, BACKGROUND, JavaAwtFontTextAttribute *)

/*!
 @brief The BIDI_EMBEDDING text attribute key.
 */
inline JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_get_BIDI_EMBEDDING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_BIDI_EMBEDDING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, BIDI_EMBEDDING, JavaAwtFontTextAttribute *)

/*!
 @brief The CHAR_REPLACEMENT text attribute key.
 */
inline JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_get_CHAR_REPLACEMENT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_CHAR_REPLACEMENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, CHAR_REPLACEMENT, JavaAwtFontTextAttribute *)

/*!
 @brief The FAMILY text attribute key.
 */
inline JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_get_FAMILY();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_FAMILY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, FAMILY, JavaAwtFontTextAttribute *)

/*!
 @brief The FONT text attribute key.
 */
inline JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_get_FONT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_FONT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, FONT, JavaAwtFontTextAttribute *)

/*!
 @brief The FOREGROUND text attribute key.
 */
inline JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_get_FOREGROUND();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_FOREGROUND;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, FOREGROUND, JavaAwtFontTextAttribute *)

/*!
 @brief The INPUT_METHOD_HIGHLIGHT text attribute key.
 */
inline JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_get_INPUT_METHOD_HIGHLIGHT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_INPUT_METHOD_HIGHLIGHT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, INPUT_METHOD_HIGHLIGHT, JavaAwtFontTextAttribute *)

/*!
 @brief The INPUT_METHOD_UNDERLINE text attribute key.
 */
inline JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_get_INPUT_METHOD_UNDERLINE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_INPUT_METHOD_UNDERLINE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, INPUT_METHOD_UNDERLINE, JavaAwtFontTextAttribute *)

/*!
 @brief The JUSTIFICATION text attribute key.
 */
inline JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_get_JUSTIFICATION();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_JUSTIFICATION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, JUSTIFICATION, JavaAwtFontTextAttribute *)

/*!
 @brief The Constant JUSTIFICATION_indicates the full requested width.
 */
inline JavaLangFloat *JavaAwtFontTextAttribute_get_JUSTIFICATION_FULL();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangFloat *JavaAwtFontTextAttribute_JUSTIFICATION_FULL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, JUSTIFICATION_FULL, JavaLangFloat *)

/*!
 @brief The Constant JUSTIFICATION_NONE indicates that line is not
 allowed for justification.
 */
inline JavaLangFloat *JavaAwtFontTextAttribute_get_JUSTIFICATION_NONE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangFloat *JavaAwtFontTextAttribute_JUSTIFICATION_NONE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, JUSTIFICATION_NONE, JavaLangFloat *)

/*!
 @brief The KERNING text attribute key.
 @since 1.6
 */
inline JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_get_KERNING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_KERNING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, KERNING, JavaAwtFontTextAttribute *)

/*!
 @since 1.6
 */
inline JavaLangInteger *JavaAwtFontTextAttribute_get_KERNING_ON();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *JavaAwtFontTextAttribute_KERNING_ON;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, KERNING_ON, JavaLangInteger *)

/*!
 @brief The LIGATURES text attribute key.
 @since 1.6
 */
inline JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_get_LIGATURES();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_LIGATURES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, LIGATURES, JavaAwtFontTextAttribute *)

/*!
 @since 1.6
 */
inline JavaLangInteger *JavaAwtFontTextAttribute_get_LIGATURES_ON();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *JavaAwtFontTextAttribute_LIGATURES_ON;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, LIGATURES_ON, JavaLangInteger *)

/*!
 @brief The NUMERIC_SHAPING text attribute.
 */
inline JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_get_NUMERIC_SHAPING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_NUMERIC_SHAPING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, NUMERIC_SHAPING, JavaAwtFontTextAttribute *)

/*!
 @brief The POSTURE text attribute.
 */
inline JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_get_POSTURE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_POSTURE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, POSTURE, JavaAwtFontTextAttribute *)

/*!
 @brief The Constant POSTURE_REGULAR indicates regular posture.
 */
inline JavaLangFloat *JavaAwtFontTextAttribute_get_POSTURE_REGULAR();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangFloat *JavaAwtFontTextAttribute_POSTURE_REGULAR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, POSTURE_REGULAR, JavaLangFloat *)

/*!
 @brief The Constant POSTURE_OBLIQUE indicates italic posture.
 */
inline JavaLangFloat *JavaAwtFontTextAttribute_get_POSTURE_OBLIQUE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangFloat *JavaAwtFontTextAttribute_POSTURE_OBLIQUE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, POSTURE_OBLIQUE, JavaLangFloat *)

/*!
 @brief The RUN_DIRECTION text attribute.
 */
inline JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_get_RUN_DIRECTION();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_RUN_DIRECTION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, RUN_DIRECTION, JavaAwtFontTextAttribute *)

/*!
 @brief The Constant RUN_DIRECTION_LTR indicates left-to-right run
 direction.
 */
inline JavaLangBoolean *JavaAwtFontTextAttribute_get_RUN_DIRECTION_LTR();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangBoolean *JavaAwtFontTextAttribute_RUN_DIRECTION_LTR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, RUN_DIRECTION_LTR, JavaLangBoolean *)

/*!
 @brief The Constant RUN_DIRECTION_RTL indicates right-to-left run
 direction.
 */
inline JavaLangBoolean *JavaAwtFontTextAttribute_get_RUN_DIRECTION_RTL();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangBoolean *JavaAwtFontTextAttribute_RUN_DIRECTION_RTL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, RUN_DIRECTION_RTL, JavaLangBoolean *)

/*!
 @brief The SIZE text attribute.
 */
inline JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_get_SIZE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_SIZE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, SIZE, JavaAwtFontTextAttribute *)

/*!
 @brief The STRIKETHROUGH text attribute.
 */
inline JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_get_STRIKETHROUGH();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_STRIKETHROUGH;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, STRIKETHROUGH, JavaAwtFontTextAttribute *)

/*!
 @brief The Constant STRIKETHROUGH_ON indicates a single strikethrough.
 */
inline JavaLangBoolean *JavaAwtFontTextAttribute_get_STRIKETHROUGH_ON();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangBoolean *JavaAwtFontTextAttribute_STRIKETHROUGH_ON;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, STRIKETHROUGH_ON, JavaLangBoolean *)

/*!
 @brief The SUPERSCRIPT text attribute.
 */
inline JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_get_SUPERSCRIPT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_SUPERSCRIPT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, SUPERSCRIPT, JavaAwtFontTextAttribute *)

/*!
 @brief The Constant SUPERSCRIPT_SUB indicates a standard subscript.
 */
inline JavaLangInteger *JavaAwtFontTextAttribute_get_SUPERSCRIPT_SUB();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *JavaAwtFontTextAttribute_SUPERSCRIPT_SUB;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, SUPERSCRIPT_SUB, JavaLangInteger *)

/*!
 @brief The Constant SUPERSCRIPT_SUPER indicates a standard superscript.
 */
inline JavaLangInteger *JavaAwtFontTextAttribute_get_SUPERSCRIPT_SUPER();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *JavaAwtFontTextAttribute_SUPERSCRIPT_SUPER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, SUPERSCRIPT_SUPER, JavaLangInteger *)

/*!
 @brief The SWAP_COLORS text attribute.
 */
inline JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_get_SWAP_COLORS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_SWAP_COLORS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, SWAP_COLORS, JavaAwtFontTextAttribute *)

/*!
 @brief The Constant SWAP_COLORS_ON indicates a swap of foreground
 and background.
 */
inline JavaLangBoolean *JavaAwtFontTextAttribute_get_SWAP_COLORS_ON();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangBoolean *JavaAwtFontTextAttribute_SWAP_COLORS_ON;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, SWAP_COLORS_ON, JavaLangBoolean *)

/*!
 @brief The TRACKING text attribute key.
 @since 1.6
 */
inline JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_get_TRACKING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_TRACKING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, TRACKING, JavaAwtFontTextAttribute *)

/*!
 @since 1.6
 */
inline JavaLangFloat *JavaAwtFontTextAttribute_get_TRACKING_LOOSE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangFloat *JavaAwtFontTextAttribute_TRACKING_LOOSE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, TRACKING_LOOSE, JavaLangFloat *)

/*!
 @since 1.6
 */
inline JavaLangFloat *JavaAwtFontTextAttribute_get_TRACKING_TIGHT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangFloat *JavaAwtFontTextAttribute_TRACKING_TIGHT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, TRACKING_TIGHT, JavaLangFloat *)

/*!
 @brief The TRANSFORM text attribute.
 */
inline JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_get_TRANSFORM();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_TRANSFORM;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, TRANSFORM, JavaAwtFontTextAttribute *)

/*!
 @brief The Constant UNDERLINE text attribute.
 */
inline JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_get_UNDERLINE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_UNDERLINE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, UNDERLINE, JavaAwtFontTextAttribute *)

/*!
 @brief The Constant UNDERLINE_ON indicates a standard underline
 at the roman baseline for roman text.
 */
inline JavaLangInteger *JavaAwtFontTextAttribute_get_UNDERLINE_ON();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *JavaAwtFontTextAttribute_UNDERLINE_ON;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, UNDERLINE_ON, JavaLangInteger *)

/*!
 @brief The Constant UNDERLINE_LOW_ONE_PIXEL indicates a single
 pixel solid low underline.
 */
inline JavaLangInteger *JavaAwtFontTextAttribute_get_UNDERLINE_LOW_ONE_PIXEL();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *JavaAwtFontTextAttribute_UNDERLINE_LOW_ONE_PIXEL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, UNDERLINE_LOW_ONE_PIXEL, JavaLangInteger *)

/*!
 @brief The Constant UNDERLINE_LOW_TWO_PIXEL indicates a double
 pixel solid low underline.
 */
inline JavaLangInteger *JavaAwtFontTextAttribute_get_UNDERLINE_LOW_TWO_PIXEL();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *JavaAwtFontTextAttribute_UNDERLINE_LOW_TWO_PIXEL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, UNDERLINE_LOW_TWO_PIXEL, JavaLangInteger *)

/*!
 @brief The Constant UNDERLINE_LOW_DOTTED indicates a
 single pixel dotted low underline.
 */
inline JavaLangInteger *JavaAwtFontTextAttribute_get_UNDERLINE_LOW_DOTTED();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *JavaAwtFontTextAttribute_UNDERLINE_LOW_DOTTED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, UNDERLINE_LOW_DOTTED, JavaLangInteger *)

/*!
 @brief The Constant UNDERLINE_LOW_GRAY indicates double pixel
 gray low underline.
 */
inline JavaLangInteger *JavaAwtFontTextAttribute_get_UNDERLINE_LOW_GRAY();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *JavaAwtFontTextAttribute_UNDERLINE_LOW_GRAY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, UNDERLINE_LOW_GRAY, JavaLangInteger *)

/*!
 @brief The Constant UNDERLINE_LOW_DASHED indicates single pixel dashed
 low underline.
 */
inline JavaLangInteger *JavaAwtFontTextAttribute_get_UNDERLINE_LOW_DASHED();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *JavaAwtFontTextAttribute_UNDERLINE_LOW_DASHED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, UNDERLINE_LOW_DASHED, JavaLangInteger *)

/*!
 @brief The WEIGHT text attribute.
 */
inline JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_get_WEIGHT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_WEIGHT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, WEIGHT, JavaAwtFontTextAttribute *)

/*!
 @brief The Constant WEIGHT_EXTRA_LIGHT indicates the lightest
 predefined weight.
 */
inline JavaLangFloat *JavaAwtFontTextAttribute_get_WEIGHT_EXTRA_LIGHT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangFloat *JavaAwtFontTextAttribute_WEIGHT_EXTRA_LIGHT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, WEIGHT_EXTRA_LIGHT, JavaLangFloat *)

/*!
 @brief The Constant WEIGHT_LIGHT indicates the standard light weight.
 */
inline JavaLangFloat *JavaAwtFontTextAttribute_get_WEIGHT_LIGHT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangFloat *JavaAwtFontTextAttribute_WEIGHT_LIGHT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, WEIGHT_LIGHT, JavaLangFloat *)

/*!
 @brief The Constant WEIGHT_DEMILIGHT indicates an intermediate weight
 between LIGHT and STANDARD.
 */
inline JavaLangFloat *JavaAwtFontTextAttribute_get_WEIGHT_DEMILIGHT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangFloat *JavaAwtFontTextAttribute_WEIGHT_DEMILIGHT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, WEIGHT_DEMILIGHT, JavaLangFloat *)

/*!
 @brief The Constant WEIGHT_REGULAR indicates the standart weight.
 */
inline JavaLangFloat *JavaAwtFontTextAttribute_get_WEIGHT_REGULAR();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangFloat *JavaAwtFontTextAttribute_WEIGHT_REGULAR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, WEIGHT_REGULAR, JavaLangFloat *)

/*!
 @brief The Constant WEIGHT_SEMIBOLD indicates a semi weight
 of REGULAR.
 */
inline JavaLangFloat *JavaAwtFontTextAttribute_get_WEIGHT_SEMIBOLD();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangFloat *JavaAwtFontTextAttribute_WEIGHT_SEMIBOLD;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, WEIGHT_SEMIBOLD, JavaLangFloat *)

/*!
 @brief The Constant WEIGHT_MEDIUM indicates average weight
 between the REGULAR and BOLD.
 */
inline JavaLangFloat *JavaAwtFontTextAttribute_get_WEIGHT_MEDIUM();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangFloat *JavaAwtFontTextAttribute_WEIGHT_MEDIUM;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, WEIGHT_MEDIUM, JavaLangFloat *)

/*!
 @brief The Constant WEIGHT_DEMIBOLD indicates
 a lighter weight than BOLD.
 */
inline JavaLangFloat *JavaAwtFontTextAttribute_get_WEIGHT_DEMIBOLD();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangFloat *JavaAwtFontTextAttribute_WEIGHT_DEMIBOLD;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, WEIGHT_DEMIBOLD, JavaLangFloat *)

/*!
 @brief The Constant WEIGHT_BOLD indicates the standard bold weight.
 */
inline JavaLangFloat *JavaAwtFontTextAttribute_get_WEIGHT_BOLD();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangFloat *JavaAwtFontTextAttribute_WEIGHT_BOLD;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, WEIGHT_BOLD, JavaLangFloat *)

/*!
 @brief The Constant WEIGHT_HEAVY indicates a heavier weight than BOLD.
 */
inline JavaLangFloat *JavaAwtFontTextAttribute_get_WEIGHT_HEAVY();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangFloat *JavaAwtFontTextAttribute_WEIGHT_HEAVY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, WEIGHT_HEAVY, JavaLangFloat *)

/*!
 @brief The Constant WEIGHT_EXTRABOLD indicates an extra heavy weight.
 */
inline JavaLangFloat *JavaAwtFontTextAttribute_get_WEIGHT_EXTRABOLD();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangFloat *JavaAwtFontTextAttribute_WEIGHT_EXTRABOLD;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, WEIGHT_EXTRABOLD, JavaLangFloat *)

/*!
 @brief The Constant WEIGHT_ULTRABOLD indicates the heaviest predefined
 weight.
 */
inline JavaLangFloat *JavaAwtFontTextAttribute_get_WEIGHT_ULTRABOLD();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangFloat *JavaAwtFontTextAttribute_WEIGHT_ULTRABOLD;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, WEIGHT_ULTRABOLD, JavaLangFloat *)

/*!
 @brief The WIDTH text attribute.
 */
inline JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_get_WIDTH();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_WIDTH;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, WIDTH, JavaAwtFontTextAttribute *)

/*!
 @brief The Constant WIDTH_CONDENSED indicates the most condensed
 predefined width.
 */
inline JavaLangFloat *JavaAwtFontTextAttribute_get_WIDTH_CONDENSED();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangFloat *JavaAwtFontTextAttribute_WIDTH_CONDENSED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, WIDTH_CONDENSED, JavaLangFloat *)

/*!
 @brief The Constant WIDTH_SEMI_CONDENSED indicates
 a semi condensed width.
 */
inline JavaLangFloat *JavaAwtFontTextAttribute_get_WIDTH_SEMI_CONDENSED();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangFloat *JavaAwtFontTextAttribute_WIDTH_SEMI_CONDENSED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, WIDTH_SEMI_CONDENSED, JavaLangFloat *)

/*!
 @brief The Constant WIDTH_REGULAR indicates the standard width.
 */
inline JavaLangFloat *JavaAwtFontTextAttribute_get_WIDTH_REGULAR();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangFloat *JavaAwtFontTextAttribute_WIDTH_REGULAR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, WIDTH_REGULAR, JavaLangFloat *)

/*!
 @brief The Constant WIDTH_SEMI_EXTENDED indicates semi extended width.
 */
inline JavaLangFloat *JavaAwtFontTextAttribute_get_WIDTH_SEMI_EXTENDED();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangFloat *JavaAwtFontTextAttribute_WIDTH_SEMI_EXTENDED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, WIDTH_SEMI_EXTENDED, JavaLangFloat *)

/*!
 @brief The Constant WIDTH_EXTENDED indicates extended width.
 */
inline JavaLangFloat *JavaAwtFontTextAttribute_get_WIDTH_EXTENDED();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangFloat *JavaAwtFontTextAttribute_WIDTH_EXTENDED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, WIDTH_EXTENDED, JavaLangFloat *)

FOUNDATION_EXPORT void JavaAwtFontTextAttribute_initWithNSString_(JavaAwtFontTextAttribute *self, NSString *name);

FOUNDATION_EXPORT JavaAwtFontTextAttribute *new_JavaAwtFontTextAttribute_initWithNSString_(NSString *name) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaAwtFontTextAttribute *create_JavaAwtFontTextAttribute_initWithNSString_(NSString *name);

J2OBJC_TYPE_LITERAL_HEADER(JavaAwtFontTextAttribute)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaAwtFontTextAttribute")
