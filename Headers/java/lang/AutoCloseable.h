//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/lang/AutoCloseable.java
//

#include "../../J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaLangAutoCloseable")
#ifdef RESTRICT_JavaLangAutoCloseable
#define INCLUDE_ALL_JavaLangAutoCloseable 0
#else
#define INCLUDE_ALL_JavaLangAutoCloseable 1
#endif
#undef RESTRICT_JavaLangAutoCloseable

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaLangAutoCloseable_) && (INCLUDE_ALL_JavaLangAutoCloseable || defined(INCLUDE_JavaLangAutoCloseable))
#define JavaLangAutoCloseable_

/*!
 @brief Defines an interface for classes that can (or need to) be closed once they
 are not used any longer.
 Calling the <code>close</code> method releases resources
 that the object holds.
 <p>A common pattern for using an <code>AutoCloseable</code> resource: 
@code
     Closable foo = new Foo();
   try 
      ...;
   } finally {
      foo.close();
   }
  
@endcode
 @since 1.7
  1.7
 */
@protocol JavaLangAutoCloseable < NSObject, JavaObject >

/*!
 @brief Closes the object and release any system resources it holds.
 <p>Unless the implementing class specifies otherwise, it is an error to
 call <code>close</code> more than once.
 */
- (void)close;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaLangAutoCloseable)

J2OBJC_TYPE_LITERAL_HEADER(JavaLangAutoCloseable)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaLangAutoCloseable")
