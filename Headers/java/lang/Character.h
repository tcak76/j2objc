//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/lang/Character.java
//

#include "../../J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaLangCharacter")
#ifdef RESTRICT_JavaLangCharacter
#define INCLUDE_ALL_JavaLangCharacter 0
#else
#define INCLUDE_ALL_JavaLangCharacter 1
#endif
#undef RESTRICT_JavaLangCharacter
#ifdef INCLUDE_JavaLangCharacter_UnicodeBlock
#define INCLUDE_JavaLangCharacter_Subset 1
#endif

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaLangCharacter_) && (INCLUDE_ALL_JavaLangCharacter || defined(INCLUDE_JavaLangCharacter))
#define JavaLangCharacter_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "../../java/io/Serializable.h"

#define RESTRICT_JavaLangComparable 1
#define INCLUDE_JavaLangComparable 1
#include "../../java/lang/Comparable.h"

@class IOSCharArray;
@class IOSClass;
@class IOSObjectArray;
@protocol JavaLangCharSequence;

/*!
 @brief The wrapper for the primitive type <code>char</code>.
 This class also provides a
 number of utility methods for working with characters.
 <p>Character data is kept up to date as Unicode evolves.
 See the <a href="../util/Locale.html#locale_data">Locale data</a> section of
 the <code>Locale</code> documentation for details of the Unicode versions implemented by current
 and historical Android releases.
 <p>The Unicode specification, character tables, and other information are available at
 <a href="http://www.unicode.org/">http://www.unicode.org/</a>.
 <p>Unicode characters are referred to as <i>code points</i>. The range of valid
 code points is U+0000 to U+10FFFF. The <i>Basic Multilingual Plane (BMP)</i>
 is the code point range U+0000 to U+FFFF. Characters above the BMP are
 referred to as <i>Supplementary Characters</i>. On the Java platform, UTF-16
 encoding and <code>char</code> pairs are used to represent code points in the
 supplementary range. A pair of <code>char</code> values that represent a
 supplementary character are made up of a <i>high surrogate</i> with a value
 range of 0xD800 to 0xDBFF and a <i>low surrogate</i> with a value range of
 0xDC00 to 0xDFFF.
 <p>
 On the Java platform a <code>char</code> value represents either a single BMP code
 point or a UTF-16 unit that's part of a surrogate pair. The <code>int</code> type
 is used to represent all Unicode code points.
 <a name="unicode_categories"><h3>Unicode categories</h3></a>
 <p>Here's a list of the Unicode character categories and the corresponding Java constant,
 grouped semantically to provide a convenient overview. This table is also useful in
 conjunction with <code>\p</code> and <code>\P</code> in <code>regular expressions</code>.
 <span class="datatable">
 
 
 
 <p><table>
 <tr> <td> Cn </td> <td> Unassigned </td>  <td><code>UNASSIGNED</code></td> </tr>
 <tr> <td> Cc </td> <td> Control </td>     <td><code>CONTROL</code></td> </tr>
 <tr> <td> Cf </td> <td> Format </td>      <td><code>FORMAT</code></td> </tr>
 <tr> <td> Co </td> <td> Private use </td> <td><code>PRIVATE_USE</code></td> </tr>
 <tr> <td> Cs </td> <td> Surrogate </td>   <td><code>SURROGATE</code></td> </tr>
 <tr> <td><br></td> </tr>
 <tr> <td> Lu </td> <td> Uppercase letter </td> <td><code>UPPERCASE_LETTER</code></td> </tr>
 <tr> <td> Ll </td> <td> Lowercase letter </td> <td><code>LOWERCASE_LETTER</code></td> </tr>
 <tr> <td> Lt </td> <td> Titlecase letter </td> <td><code>TITLECASE_LETTER</code></td> </tr>
 <tr> <td> Lm </td> <td> Modifier letter </td>  <td><code>MODIFIER_LETTER</code></td> </tr>
 <tr> <td> Lo </td> <td> Other letter </td>     <td><code>OTHER_LETTER</code></td> </tr>
 <tr> <td><br></td> </tr>
 <tr> <td> Mn </td> <td> Non-spacing mark </td>       <td><code>NON_SPACING_MARK</code></td> </tr>
 <tr> <td> Me </td> <td> Enclosing mark </td>         <td><code>ENCLOSING_MARK</code></td> </tr>
 <tr> <td> Mc </td> <td> Combining spacing mark </td> <td><code>COMBINING_SPACING_MARK</code></td> </tr>
 <tr> <td><br></td> </tr>
 <tr> <td> Nd </td> <td> Decimal digit number </td> <td><code>DECIMAL_DIGIT_NUMBER</code></td> </tr>
 <tr> <td> Nl </td> <td> Letter number </td>        <td><code>LETTER_NUMBER</code></td> </tr>
 <tr> <td> No </td> <td> Other number </td>         <td><code>OTHER_NUMBER</code></td> </tr>
 <tr> <td><br></td> </tr>
 <tr> <td> Pd </td> <td> Dash punctuation </td>          <td><code>DASH_PUNCTUATION</code></td> </tr>
 <tr> <td> Ps </td> <td> Start punctuation </td>         <td><code>START_PUNCTUATION</code></td> </tr>
 <tr> <td> Pe </td> <td> End punctuation </td>           <td><code>END_PUNCTUATION</code></td> </tr>
 <tr> <td> Pc </td> <td> Connector punctuation </td>     <td><code>CONNECTOR_PUNCTUATION</code></td> </tr>
 <tr> <td> Pi </td> <td> Initial quote punctuation </td> <td><code>INITIAL_QUOTE_PUNCTUATION</code></td> </tr>
 <tr> <td> Pf </td> <td> Final quote punctuation </td>   <td><code>FINAL_QUOTE_PUNCTUATION</code></td> </tr>
 <tr> <td> Po </td> <td> Other punctuation </td>         <td><code>OTHER_PUNCTUATION</code></td> </tr>
 <tr> <td><br></td> </tr>
 <tr> <td> Sm </td> <td> Math symbol </td>     <td><code>MATH_SYMBOL</code></td> </tr>
 <tr> <td> Sc </td> <td> Currency symbol </td> <td><code>CURRENCY_SYMBOL</code></td> </tr>
 <tr> <td> Sk </td> <td> Modifier symbol </td> <td><code>MODIFIER_SYMBOL</code></td> </tr>
 <tr> <td> So </td> <td> Other symbol </td>    <td><code>OTHER_SYMBOL</code></td> </tr>
 <tr> <td><br></td> </tr>
 <tr> <td> Zs </td> <td> Space separator </td>     <td><code>SPACE_SEPARATOR</code></td> </tr>
 <tr> <td> Zl </td> <td> Line separator </td>      <td><code>LINE_SEPARATOR</code></td> </tr>
 <tr> <td> Zp </td> <td> Paragraph separator </td> <td><code>PARAGRAPH_SEPARATOR</code></td> </tr>
 </table>
 </span>
 @since 1.0
 */
@interface JavaLangCharacter : NSObject < JavaIoSerializable, JavaLangComparable >

+ (jchar)MIN_VALUE;

+ (jchar)MAX_VALUE;

+ (jint)MIN_RADIX;

+ (jint)MAX_RADIX;

+ (IOSClass *)TYPE;

+ (jbyte)UNASSIGNED;

+ (jbyte)UPPERCASE_LETTER;

+ (jbyte)LOWERCASE_LETTER;

+ (jbyte)TITLECASE_LETTER;

+ (jbyte)MODIFIER_LETTER;

+ (jbyte)OTHER_LETTER;

+ (jbyte)NON_SPACING_MARK;

+ (jbyte)ENCLOSING_MARK;

+ (jbyte)COMBINING_SPACING_MARK;

+ (jbyte)DECIMAL_DIGIT_NUMBER;

+ (jbyte)LETTER_NUMBER;

+ (jbyte)OTHER_NUMBER;

+ (jbyte)SPACE_SEPARATOR;

+ (jbyte)LINE_SEPARATOR;

+ (jbyte)PARAGRAPH_SEPARATOR;

+ (jbyte)CONTROL;

+ (jbyte)FORMAT;

+ (jbyte)PRIVATE_USE;

+ (jbyte)SURROGATE;

+ (jbyte)DASH_PUNCTUATION;

+ (jbyte)START_PUNCTUATION;

+ (jbyte)END_PUNCTUATION;

+ (jbyte)CONNECTOR_PUNCTUATION;

+ (jbyte)OTHER_PUNCTUATION;

+ (jbyte)MATH_SYMBOL;

+ (jbyte)CURRENCY_SYMBOL;

+ (jbyte)MODIFIER_SYMBOL;

+ (jbyte)OTHER_SYMBOL;

+ (jbyte)INITIAL_QUOTE_PUNCTUATION;

+ (jbyte)FINAL_QUOTE_PUNCTUATION;

+ (jbyte)DIRECTIONALITY_UNDEFINED;

+ (jbyte)DIRECTIONALITY_LEFT_TO_RIGHT;

+ (jbyte)DIRECTIONALITY_RIGHT_TO_LEFT;

+ (jbyte)DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC;

+ (jbyte)DIRECTIONALITY_EUROPEAN_NUMBER;

+ (jbyte)DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR;

+ (jbyte)DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR;

+ (jbyte)DIRECTIONALITY_ARABIC_NUMBER;

+ (jbyte)DIRECTIONALITY_COMMON_NUMBER_SEPARATOR;

+ (jbyte)DIRECTIONALITY_NONSPACING_MARK;

+ (jbyte)DIRECTIONALITY_BOUNDARY_NEUTRAL;

+ (jbyte)DIRECTIONALITY_PARAGRAPH_SEPARATOR;

+ (jbyte)DIRECTIONALITY_SEGMENT_SEPARATOR;

+ (jbyte)DIRECTIONALITY_WHITESPACE;

+ (jbyte)DIRECTIONALITY_OTHER_NEUTRALS;

+ (jbyte)DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING;

+ (jbyte)DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE;

+ (jbyte)DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING;

+ (jbyte)DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE;

+ (jbyte)DIRECTIONALITY_POP_DIRECTIONAL_FORMAT;

+ (jchar)MIN_HIGH_SURROGATE;

+ (jchar)MAX_HIGH_SURROGATE;

+ (jchar)MIN_LOW_SURROGATE;

+ (jchar)MAX_LOW_SURROGATE;

+ (jchar)MIN_SURROGATE;

+ (jchar)MAX_SURROGATE;

+ (jint)MIN_SUPPLEMENTARY_CODE_POINT;

+ (jint)MIN_CODE_POINT;

+ (jint)MAX_CODE_POINT;

+ (jint)SIZE;

#pragma mark Public

/*!
 @brief Constructs a new <code>Character</code> with the specified primitive char
 value.
 @param value
 the primitive char value to store in the new instance.
 */
- (instancetype)initWithChar:(jchar)value;

/*!
 @brief Calculates the number of <code>char</code> values required to represent the
 specified Unicode code point.
 This method checks if the <code>codePoint</code>
 is greater than or equal to <code>0x10000</code>, in which case <code>2</code> is
 returned, otherwise <code>1</code>. To test if the code point is valid, use
 the <code>isValidCodePoint(int)</code> method.
 @param codePoint
 the code point for which to calculate the number of required
 chars.
 @return <code>2</code> if <code>codePoint >= 0x10000</code>; <code>1</code> otherwise.
 - seealso: #isValidCodePoint(int)
 - seealso: #isSupplementaryCodePoint(int)
 @since 1.5
 */
+ (jint)charCountWithInt:(jint)codePoint;

/*!
 @brief Gets the primitive value of this character.
 @return this object's primitive value.
 */
- (jchar)charValue;

/*!
 @brief Returns the code point at <code>index</code> in the specified array of
 character units.
 If the unit at <code>index</code> is a high-surrogate unit,
 <code>index + 1</code> is less than the length of the array and the unit at
 <code>index + 1</code> is a low-surrogate unit, then the supplementary code
 point represented by the pair is returned; otherwise the <code>char</code>
 value at <code>index</code> is returned.
 @param seq
 the source array of <code>char</code> units.
 @param index
 the position in <code>seq</code> from which to retrieve the code
 point.
 @return the Unicode code point or <code>char</code> value at <code>index</code> in
 <code>seq</code>.
 @throws NullPointerException
 if <code>seq</code> is <code>null</code>.
 @throws IndexOutOfBoundsException
 if the <code>index</code> is negative or greater than or equal to
 the length of <code>seq</code>.
 @since 1.5
 */
+ (jint)codePointAtWithCharArray:(IOSCharArray *)seq
                         withInt:(jint)index;

/*!
 @brief Returns the code point at <code>index</code> in the specified array of
 character units, where <code>index</code> has to be less than <code>limit</code>.
 If the unit at <code>index</code> is a high-surrogate unit, <code>index + 1</code>
 is less than <code>limit</code> and the unit at <code>index + 1</code> is a
 low-surrogate unit, then the supplementary code point represented by the
 pair is returned; otherwise the <code>char</code> value at <code>index</code> is
 returned.
 @param seq
 the source array of <code>char</code> units.
 @param index
 the position in <code>seq</code> from which to get the code point.
 @param limit
 the index after the last unit in <code>seq</code> that can be used.
 @return the Unicode code point or <code>char</code> value at <code>index</code> in
 <code>seq</code>.
 @throws NullPointerException
 if <code>seq</code> is <code>null</code>.
 @throws IndexOutOfBoundsException
 if <code>index < 0</code>, <code>index >= limit</code>,
 <code>limit < 0</code> or if <code>limit</code> is greater than the
 length of <code>seq</code>.
 @since 1.5
 */
+ (jint)codePointAtWithCharArray:(IOSCharArray *)seq
                         withInt:(jint)index
                         withInt:(jint)limit;

/*!
 @brief Returns the code point at <code>index</code> in the specified sequence of
 character units.
 If the unit at <code>index</code> is a high-surrogate unit,
 <code>index + 1</code> is less than the length of the sequence and the unit at
 <code>index + 1</code> is a low-surrogate unit, then the supplementary code
 point represented by the pair is returned; otherwise the <code>char</code>
 value at <code>index</code> is returned.
 @param seq
 the source sequence of <code>char</code> units.
 @param index
 the position in <code>seq</code> from which to retrieve the code
 point.
 @return the Unicode code point or <code>char</code> value at <code>index</code> in
 <code>seq</code>.
 @throws NullPointerException
 if <code>seq</code> is <code>null</code>.
 @throws IndexOutOfBoundsException
 if the <code>index</code> is negative or greater than or equal to
 the length of <code>seq</code>.
 @since 1.5
 */
+ (jint)codePointAtWithJavaLangCharSequence:(id<JavaLangCharSequence>)seq
                                    withInt:(jint)index;

/*!
 @brief Returns the code point that precedes <code>index</code> in the specified
 array of character units.
 If the unit at <code>index - 1</code> is a
 low-surrogate unit, <code>index - 2</code> is not negative and the unit at
 <code>index - 2</code> is a high-surrogate unit, then the supplementary code
 point represented by the pair is returned; otherwise the <code>char</code>
 value at <code>index - 1</code> is returned.
 @param seq
 the source array of <code>char</code> units.
 @param index
 the position in <code>seq</code> following the code
 point that should be returned.
 @return the Unicode code point or <code>char</code> value before <code>index</code>
 in <code>seq</code>.
 @throws NullPointerException
 if <code>seq</code> is <code>null</code>.
 @throws IndexOutOfBoundsException
 if the <code>index</code> is less than 1 or greater than the
 length of <code>seq</code>.
 @since 1.5
 */
+ (jint)codePointBeforeWithCharArray:(IOSCharArray *)seq
                             withInt:(jint)index;

/*!
 @brief Returns the code point that precedes the <code>index</code> in the specified
 array of character units and is not less than <code>start</code>.
 If the unit
 at <code>index - 1</code> is a low-surrogate unit, <code>index - 2</code> is not
 less than <code>start</code> and the unit at <code>index - 2</code> is a
 high-surrogate unit, then the supplementary code point represented by the
 pair is returned; otherwise the <code>char</code> value at <code>index - 1</code>
 is returned.
 @param seq
 the source array of <code>char</code> units.
 @param index
 the position in <code>seq</code> following the code point that
 should be returned.
 @param start
 the index of the first element in <code>seq</code>.
 @return the Unicode code point or <code>char</code> value before <code>index</code>
 in <code>seq</code>.
 @throws NullPointerException
 if <code>seq</code> is <code>null</code>.
 @throws IndexOutOfBoundsException
 if the <code>index <= start</code>, <code>start < 0</code>,
 <code>index</code> is greater than the length of <code>seq</code>, or
 if <code>start</code> is equal or greater than the length of
 <code>seq</code>.
 @since 1.5
 */
+ (jint)codePointBeforeWithCharArray:(IOSCharArray *)seq
                             withInt:(jint)index
                             withInt:(jint)start;

/*!
 @brief Returns the code point that precedes <code>index</code> in the specified
 sequence of character units.
 If the unit at <code>index - 1</code> is a
 low-surrogate unit, <code>index - 2</code> is not negative and the unit at
 <code>index - 2</code> is a high-surrogate unit, then the supplementary code
 point represented by the pair is returned; otherwise the <code>char</code>
 value at <code>index - 1</code> is returned.
 @param seq
 the source sequence of <code>char</code> units.
 @param index
 the position in <code>seq</code> following the code
 point that should be returned.
 @return the Unicode code point or <code>char</code> value before <code>index</code>
 in <code>seq</code>.
 @throws NullPointerException
 if <code>seq</code> is <code>null</code>.
 @throws IndexOutOfBoundsException
 if the <code>index</code> is less than 1 or greater than the
 length of <code>seq</code>.
 @since 1.5
 */
+ (jint)codePointBeforeWithJavaLangCharSequence:(id<JavaLangCharSequence>)seq
                                        withInt:(jint)index;

/*!
 @brief Counts the number of Unicode code points in the subsequence of the
 specified char array, as delineated by <code>offset</code> and <code>count</code>.
 Any surrogate values with missing pair values will be counted as one code
 point.
 @param seq
 the char array to look through
 @param offset
 the inclusive index to begin counting at.
 @param count
 the number of <code>char</code> values to look through in
 <code>seq</code>.
 @return the number of Unicode code points.
 @throws NullPointerException
 if <code>seq</code> is <code>null</code>.
 @throws IndexOutOfBoundsException
 if <code>offset < 0</code>, <code>count < 0</code> or if
 <code>offset + count</code> is greater than the length of
 <code>seq</code>.
 @since 1.5
 */
+ (jint)codePointCountWithCharArray:(IOSCharArray *)seq
                            withInt:(jint)offset
                            withInt:(jint)count;

/*!
 @brief Counts the number of Unicode code points in the subsequence of the
 specified character sequence, as delineated by <code>beginIndex</code> and
 <code>endIndex</code>.
 Any surrogate values with missing pair values will be
 counted as one code point.
 @param seq
 the <code>CharSequence</code> to look through.
 @param beginIndex
 the inclusive index to begin counting at.
 @param endIndex
 the exclusive index to stop counting at.
 @return the number of Unicode code points.
 @throws NullPointerException
 if <code>seq</code> is <code>null</code>.
 @throws IndexOutOfBoundsException
 if <code>beginIndex < 0</code>, <code>beginIndex > endIndex</code> or
 if <code>endIndex</code> is greater than the length of <code>seq</code>.
 @since 1.5
 */
+ (jint)codePointCountWithJavaLangCharSequence:(id<JavaLangCharSequence>)seq
                                       withInt:(jint)beginIndex
                                       withInt:(jint)endIndex;

/*!
 @brief Compares two <code>char</code> values.
 @return 0 if lhs = rhs, less than 0 if lhs &lt; rhs, and greater than 0 if lhs &gt; rhs.
 @since 1.7
 */
+ (jint)compareWithChar:(jchar)lhs
               withChar:(jchar)rhs;

/*!
 @brief Compares this object to the specified character object to determine their
 relative order.
 @param c
 the character object to compare this object to.
 @return <code>0</code> if the value of this character and the value of
 <code>c</code> are equal; a positive value if the value of this
 character is greater than the value of <code>c</code>; a negative
 value if the value of this character is less than the value of
 <code>c</code>.
 - seealso: java.lang.Comparable
 @since 1.2
 */
- (jint)compareToWithId:(JavaLangCharacter *)c;

/*!
 @brief Convenience method to determine the value of the specified character
 <code>c</code> in the supplied radix.
 The value of <code>radix</code> must be
 between MIN_RADIX and MAX_RADIX.
 @param c
 the character to determine the value of.
 @param radix
 the radix.
 @return the value of <code>c</code> in <code>radix</code> if <code>radix</code> lies
 between <code>MIN_RADIX</code> and <code>MAX_RADIX</code>; -1 otherwise.
 */
+ (jint)digitWithChar:(jchar)c
              withInt:(jint)radix;

/*!
 @brief Convenience method to determine the value of the character
 <code>codePoint</code> in the supplied radix.
 The value of <code>radix</code> must
 be between MIN_RADIX and MAX_RADIX.
 @param codePoint
 the character, including supplementary characters.
 @param radix
 the radix.
 @return if <code>radix</code> lies between <code>MIN_RADIX</code> and
 <code>MAX_RADIX</code> then the value of the character in the radix;
 -1 otherwise.
 */
+ (jint)digitWithInt:(jint)codePoint
             withInt:(jint)radix;

/*!
 @brief Compares this object with the specified object and indicates if they are
 equal.
 In order to be equal, <code>object</code> must be an instance of
 <code>Character</code> and have the same char value as this object.
 @param object
 the object to compare this double with.
 @return <code>true</code> if the specified object is equal to this
 <code>Character</code>; <code>false</code> otherwise.
 */
- (jboolean)isEqual:(id)object;

/*!
 @brief Returns the character which represents the specified digit in the
 specified radix.
 The <code>radix</code> must be between <code>MIN_RADIX</code> and
 <code>MAX_RADIX</code> inclusive; <code>digit</code> must not be negative and
 smaller than <code>radix</code>. If any of these conditions does not hold, 0
 is returned.
 @param digit
 the integer value.
 @param radix
 the radix.
 @return the character which represents the <code>digit</code> in the
 <code>radix</code>.
 */
+ (jchar)forDigitWithInt:(jint)digit
                 withInt:(jint)radix;

/*!
 @brief Gets the Unicode directionality of the specified character.
 @param c
 the character to get the directionality of.
 @return the Unicode directionality of <code>c</code>.
 */
+ (jbyte)getDirectionalityWithChar:(jchar)c;

/*!
 @brief Gets the Unicode directionality of the specified character.
 @param codePoint
 the Unicode code point to get the directionality of.
 @return the Unicode directionality of <code>codePoint</code>.
 */
+ (jbyte)getDirectionalityWithInt:(jint)codePoint;

/*!
 @brief Returns a human-readable name for the given code point,
 or null if the code point is unassigned.
 <p>As a fallback mechanism this method returns strings consisting of the Unicode
 block name (with underscores replaced by spaces), a single space, and the uppercase
 hex value of the code point, using as few digits as necessary.
 <p>Examples:
 <ul>
 <li><code>Character.getName(0)</code> returns "NULL".
 <li><code>Character.getName('e')</code> returns "LATIN SMALL LETTER E".
 <li><code>Character.getName('\u0666')</code> returns "ARABIC-INDIC DIGIT SIX".
 <li><code>Character.getName(0xe000)</code> returns "PRIVATE USE AREA E000".
 </ul>
 <p>Note that the exact strings returned will vary from release to release.
 @throws IllegalArgumentException if <code>codePoint</code> is not a valid code point.
 @since 1.7
 */
+ (NSString *)getNameWithInt:(jint)codePoint;

/*!
 @brief Returns the numeric value of the specified Unicode character.
 See <code>getNumericValue(int)</code>.
 @param c the character
 @return a non-negative numeric integer value if a numeric value for
 <code>c</code> exists, -1 if there is no numeric value for <code>c</code>,
 -2 if the numeric value can not be represented as an integer.
 */
+ (jint)getNumericValueWithChar:(jchar)c;

/*!
 @brief Gets the numeric value of the specified Unicode code point.
 For example,
 the code point '\u216B' stands for the Roman number XII, which has the
 numeric value 12.
 <p>There are two points of divergence between this method and the Unicode
 specification. This method treats the letters a-z (in both upper and lower
 cases, and their full-width variants) as numbers from 10 to 35. The
 Unicode specification also supports the idea of code points with non-integer
 numeric values; this method does not (except to the extent of returning -2
 for such code points).
 @param codePoint the code point
 @return a non-negative numeric integer value if a numeric value for
 <code>codePoint</code> exists, -1 if there is no numeric value for
 <code>codePoint</code>, -2 if the numeric value can not be
 represented with an integer.
 */
+ (jint)getNumericValueWithInt:(jint)codePoint;

/*!
 @brief Gets the general Unicode category of the specified character.
 @param c
 the character to get the category of.
 @return the Unicode category of <code>c</code>.
 */
+ (jint)getTypeWithChar:(jchar)c;

/*!
 @brief Gets the general Unicode category of the specified code point.
 @param codePoint
 the Unicode code point to get the category of.
 @return the Unicode category of <code>codePoint</code>.
 */
+ (jint)getTypeWithInt:(jint)codePoint;

- (NSUInteger)hash;

/*!
 @brief Returns the high surrogate for the given code point.
 The result is meaningless if
 the given code point is not a supplementary character.
 @since 1.7
 */
+ (jchar)highSurrogateWithInt:(jint)codePoint;

/*!
 @brief Returns true if the given code point is alphabetic.
 That is,
 if it is in any of the Lu, Ll, Lt, Lm, Lo, Nl, or Other_Alphabetic categories.
 @since 1.7
 */
+ (jboolean)isAlphabeticWithInt:(jint)codePoint;

/*!
 @brief Returns true if the given code point is in the Basic Multilingual Plane (BMP).
 Such code points can be represented by a single <code>char</code>.
 @since 1.7
 */
+ (jboolean)isBmpCodePointWithInt:(jint)codePoint;

/*!
 @brief Indicates whether the specified character is defined in the Unicode
 specification.
 @param c
 the character to check.
 @return <code>true</code> if the general Unicode category of the character is
 not <code>UNASSIGNED</code>; <code>false</code> otherwise.
 */
+ (jboolean)isDefinedWithChar:(jchar)c;

/*!
 @brief Indicates whether the specified code point is defined in the Unicode
 specification.
 @param codePoint
 the code point to check.
 @return <code>true</code> if the general Unicode category of the code point is
 not <code>UNASSIGNED</code>; <code>false</code> otherwise.
 */
+ (jboolean)isDefinedWithInt:(jint)codePoint;

/*!
 @brief Indicates whether the specified character is a digit.
 @param c
 the character to check.
 @return <code>true</code> if <code>c</code> is a digit; <code>false</code>
 otherwise.
 */
+ (jboolean)isDigitWithChar:(jchar)c;

/*!
 @brief Indicates whether the specified code point is a digit.
 @param codePoint
 the code point to check.
 @return <code>true</code> if <code>codePoint</code> is a digit; <code>false</code>
 otherwise.
 */
+ (jboolean)isDigitWithInt:(jint)codePoint;

/*!
 @brief Indicates whether <code>ch</code> is a high- (or leading-) surrogate code unit
 that is used for representing supplementary characters in UTF-16
 encoding.
 @param ch
 the character to test.
 @return <code>true</code> if <code>ch</code> is a high-surrogate code unit;
 <code>false</code> otherwise.
 - seealso: #isLowSurrogate(char)
 @since 1.5
 */
+ (jboolean)isHighSurrogateWithChar:(jchar)ch;

/*!
 @brief Indicates whether the specified character is ignorable in a Java or
 Unicode identifier.
 @param c
 the character to check.
 @return <code>true</code> if <code>c</code> is ignorable; <code>false</code> otherwise.
 */
+ (jboolean)isIdentifierIgnorableWithChar:(jchar)c;

/*!
 @brief Indicates whether the specified code point is ignorable in a Java or
 Unicode identifier.
 @param codePoint
 the code point to check.
 @return <code>true</code> if <code>codePoint</code> is ignorable; <code>false</code>
 otherwise.
 */
+ (jboolean)isIdentifierIgnorableWithInt:(jint)codePoint;

/*!
 @brief Returns true if the given code point is a CJKV ideographic character.
 @since 1.7
 */
+ (jboolean)isIdeographicWithInt:(jint)codePoint;

/*!
 @brief Indicates whether the specified character is an ISO control character.
 @param c
 the character to check.
 @return <code>true</code> if <code>c</code> is an ISO control character;
 <code>false</code> otherwise.
 */
+ (jboolean)isISOControlWithChar:(jchar)c;

/*!
 @brief Indicates whether the specified code point is an ISO control character.
 @param c
 the code point to check.
 @return <code>true</code> if <code>c</code> is an ISO control character;
 <code>false</code> otherwise.
 */
+ (jboolean)isISOControlWithInt:(jint)c;

/*!
 @brief Indicates whether the specified character is a valid part of a Java
 identifier other than the first character.
 @param c
 the character to check.
 @return <code>true</code> if <code>c</code> is valid as part of a Java identifier;
 <code>false</code> otherwise.
 */
+ (jboolean)isJavaIdentifierPartWithChar:(jchar)c;

/*!
 @brief Indicates whether the specified code point is a valid part of a Java
 identifier other than the first character.
 @param codePoint
 the code point to check.
 @return <code>true</code> if <code>c</code> is valid as part of a Java identifier;
 <code>false</code> otherwise.
 */
+ (jboolean)isJavaIdentifierPartWithInt:(jint)codePoint;

/*!
 @brief Indicates whether the specified character is a valid first character for
 a Java identifier.
 @param c
 the character to check.
 @return <code>true</code> if <code>c</code> is a valid first character of a Java
 identifier; <code>false</code> otherwise.
 */
+ (jboolean)isJavaIdentifierStartWithChar:(jchar)c;

/*!
 @brief Indicates whether the specified code point is a valid first character for
 a Java identifier.
 @param codePoint
 the code point to check.
 @return <code>true</code> if <code>codePoint</code> is a valid start of a Java
 identifier; <code>false</code> otherwise.
 */
+ (jboolean)isJavaIdentifierStartWithInt:(jint)codePoint;

/*!
 @brief Indicates whether the specified character is a Java letter.
 @param c
 the character to check.
 @return <code>true</code> if <code>c</code> is a Java letter; <code>false</code>
 otherwise.
 */
+ (jboolean)isJavaLetterWithChar:(jchar)c __attribute__((deprecated));

/*!
 @brief Indicates whether the specified character is a Java letter or digit
 character.
 @param c
 the character to check.
 @return <code>true</code> if <code>c</code> is a Java letter or digit;
 <code>false</code> otherwise.
 */
+ (jboolean)isJavaLetterOrDigitWithChar:(jchar)c __attribute__((deprecated));

/*!
 @brief Indicates whether the specified character is a letter.
 @param c
 the character to check.
 @return <code>true</code> if <code>c</code> is a letter; <code>false</code> otherwise.
 */
+ (jboolean)isLetterWithChar:(jchar)c;

/*!
 @brief Indicates whether the specified code point is a letter.
 @param codePoint
 the code point to check.
 @return <code>true</code> if <code>codePoint</code> is a letter; <code>false</code>
 otherwise.
 */
+ (jboolean)isLetterWithInt:(jint)codePoint;

/*!
 @brief Indicates whether the specified character is a letter or a digit.
 @param c
 the character to check.
 @return <code>true</code> if <code>c</code> is a letter or a digit; <code>false</code>
 otherwise.
 */
+ (jboolean)isLetterOrDigitWithChar:(jchar)c;

/*!
 @brief Indicates whether the specified code point is a letter or a digit.
 @param codePoint
 the code point to check.
 @return <code>true</code> if <code>codePoint</code> is a letter or a digit;
 <code>false</code> otherwise.
 */
+ (jboolean)isLetterOrDigitWithInt:(jint)codePoint;

/*!
 @brief Indicates whether the specified character is a lower case letter.
 @param c
 the character to check.
 @return <code>true</code> if <code>c</code> is a lower case letter; <code>false</code>
 otherwise.
 */
+ (jboolean)isLowerCaseWithChar:(jchar)c;

/*!
 @brief Indicates whether the specified code point is a lower case letter.
 @param codePoint
 the code point to check.
 @return <code>true</code> if <code>codePoint</code> is a lower case letter;
 <code>false</code> otherwise.
 */
+ (jboolean)isLowerCaseWithInt:(jint)codePoint;

/*!
 @brief Indicates whether <code>ch</code> is a low- (or trailing-) surrogate code unit
 that is used for representing supplementary characters in UTF-16
 encoding.
 @param ch
 the character to test.
 @return <code>true</code> if <code>ch</code> is a low-surrogate code unit;
 <code>false</code> otherwise.
 - seealso: #isHighSurrogate(char)
 @since 1.5
 */
+ (jboolean)isLowSurrogateWithChar:(jchar)ch;

/*!
 @brief Indicates whether the specified character is mirrored.
 @param c
 the character to check.
 @return <code>true</code> if <code>c</code> is mirrored; <code>false</code>
 otherwise.
 */
+ (jboolean)isMirroredWithChar:(jchar)c;

/*!
 @brief Indicates whether the specified code point is mirrored.
 @param codePoint
 the code point to check.
 @return <code>true</code> if <code>codePoint</code> is mirrored, <code>false</code>
 otherwise.
 */
+ (jboolean)isMirroredWithInt:(jint)codePoint;

/*!
 @brief Use <code>isWhitespace(char)</code> instead.
 */
+ (jboolean)isSpaceWithChar:(jchar)c __attribute__((deprecated));

/*!
 @brief See <code>isSpaceChar(int)</code>.
 */
+ (jboolean)isSpaceCharWithChar:(jchar)c;

/*!
 @brief Returns true if the given code point is a Unicode space character.
 The exact set of characters considered as whitespace varies with Unicode version.
 Note that non-breaking spaces are considered whitespace.
 Note also that line separators are not considered whitespace; see <code>isWhitespace</code>
 for an alternative.
 */
+ (jboolean)isSpaceCharWithInt:(jint)codePoint;

/*!
 @brief Indicates whether <code>codePoint</code> is within the supplementary code
 point range.
 @param codePoint
 the code point to test.
 @return <code>true</code> if <code>codePoint</code> is within the supplementary
 code point range; <code>false</code> otherwise.
 @since 1.5
 */
+ (jboolean)isSupplementaryCodePointWithInt:(jint)codePoint;

/*!
 @brief Returns true if the given character is a high or low surrogate.
 @since 1.7
 */
+ (jboolean)isSurrogateWithChar:(jchar)ch;

/*!
 @brief Indicates whether the specified character pair is a valid surrogate pair.
 @param high
 the high surrogate unit to test.
 @param low
 the low surrogate unit to test.
 @return <code>true</code> if <code>high</code> is a high-surrogate code unit and
 <code>low</code> is a low-surrogate code unit; <code>false</code>
 otherwise.
 - seealso: #isHighSurrogate(char)
 - seealso: #isLowSurrogate(char)
 @since 1.5
 */
+ (jboolean)isSurrogatePairWithChar:(jchar)high
                           withChar:(jchar)low;

/*!
 @brief Indicates whether the specified character is a titlecase character.
 @param c
 the character to check.
 @return <code>true</code> if <code>c</code> is a titlecase character, <code>false</code>
 otherwise.
 */
+ (jboolean)isTitleCaseWithChar:(jchar)c;

/*!
 @brief Indicates whether the specified code point is a titlecase character.
 @param codePoint
 the code point to check.
 @return <code>true</code> if <code>codePoint</code> is a titlecase character,
 <code>false</code> otherwise.
 */
+ (jboolean)isTitleCaseWithInt:(jint)codePoint;

/*!
 @brief Indicates whether the specified character is valid as part of a Unicode
 identifier other than the first character.
 @param c
 the character to check.
 @return <code>true</code> if <code>c</code> is valid as part of a Unicode
 identifier; <code>false</code> otherwise.
 */
+ (jboolean)isUnicodeIdentifierPartWithChar:(jchar)c;

/*!
 @brief Indicates whether the specified code point is valid as part of a Unicode
 identifier other than the first character.
 @param codePoint
 the code point to check.
 @return <code>true</code> if <code>codePoint</code> is valid as part of a Unicode
 identifier; <code>false</code> otherwise.
 */
+ (jboolean)isUnicodeIdentifierPartWithInt:(jint)codePoint;

/*!
 @brief Indicates whether the specified character is a valid initial character
 for a Unicode identifier.
 @param c
 the character to check.
 @return <code>true</code> if <code>c</code> is a valid first character for a
 Unicode identifier; <code>false</code> otherwise.
 */
+ (jboolean)isUnicodeIdentifierStartWithChar:(jchar)c;

/*!
 @brief Indicates whether the specified code point is a valid initial character
 for a Unicode identifier.
 @param codePoint
 the code point to check.
 @return <code>true</code> if <code>codePoint</code> is a valid first character for
 a Unicode identifier; <code>false</code> otherwise.
 */
+ (jboolean)isUnicodeIdentifierStartWithInt:(jint)codePoint;

/*!
 @brief Indicates whether the specified character is an upper case letter.
 @param c
 the character to check.
 @return <code>true</code> if <code>c</code> is a upper case letter; <code>false</code>
 otherwise.
 */
+ (jboolean)isUpperCaseWithChar:(jchar)c;

/*!
 @brief Indicates whether the specified code point is an upper case letter.
 @param codePoint
 the code point to check.
 @return <code>true</code> if <code>codePoint</code> is a upper case letter;
 <code>false</code> otherwise.
 */
+ (jboolean)isUpperCaseWithInt:(jint)codePoint;

/*!
 @brief Indicates whether <code>codePoint</code> is a valid Unicode code point.
 @param codePoint
 the code point to test.
 @return <code>true</code> if <code>codePoint</code> is a valid Unicode code point;
 <code>false</code> otherwise.
 @since 1.5
 */
+ (jboolean)isValidCodePointWithInt:(jint)codePoint;

/*!
 @brief See <code>isWhitespace(int)</code>.
 */
+ (jboolean)isWhitespaceWithChar:(jchar)c;

/*!
 @brief Returns true if the given code point is a Unicode whitespace character.
 The exact set of characters considered as whitespace varies with Unicode version.
 Note that non-breaking spaces are not considered whitespace.
 Note also that line separators are considered whitespace; see <code>isSpaceChar</code>
 for an alternative.
 */
+ (jboolean)isWhitespaceWithInt:(jint)codePoint;

/*!
 @brief Returns the low surrogate for the given code point.
 The result is meaningless if
 the given code point is not a supplementary character.
 @since 1.7
 */
+ (jchar)lowSurrogateWithInt:(jint)codePoint;

/*!
 @brief Determines the index in a subsequence of the specified character array
 that is offset <code>codePointOffset</code> code points from <code>index</code>.
 The subsequence is delineated by <code>start</code> and <code>count</code>.
 @param seq
 the character array to find the index in.
 @param start
 the inclusive index that marks the beginning of the
 subsequence.
 @param count
 the number of <code>char</code> values to include within the
 subsequence.
 @param index
 the start index in the subsequence of the char array.
 @param codePointOffset
 the number of code points to look backwards or forwards; may
 be a negative or positive value.
 @return the index in <code>seq</code> that is <code>codePointOffset</code> code
 points away from <code>index</code>.
 @throws NullPointerException
 if <code>seq</code> is <code>null</code>.
 @throws IndexOutOfBoundsException
 if <code>start < 0</code>, <code>count < 0</code>,
 <code>index < start</code>, <code>index > start + count</code>,
 <code>start + count</code> is greater than the length of
 <code>seq</code>, or if there are not enough values in
 <code>seq</code> to skip <code>codePointOffset</code> code points
 forward or backward (if <code>codePointOffset</code> is
 negative) from <code>index</code>.
 @since 1.5
 */
+ (jint)offsetByCodePointsWithCharArray:(IOSCharArray *)seq
                                withInt:(jint)start
                                withInt:(jint)count
                                withInt:(jint)index
                                withInt:(jint)codePointOffset;

/*!
 @brief Determines the index in the specified character sequence that is offset
 <code>codePointOffset</code> code points from <code>index</code>.
 @param seq
 the character sequence to find the index in.
 @param index
 the start index in <code>seq</code>.
 @param codePointOffset
 the number of code points to look backwards or forwards; may
 be a negative or positive value.
 @return the index in <code>seq</code> that is <code>codePointOffset</code> code
 points away from <code>index</code>.
 @throws NullPointerException
 if <code>seq</code> is <code>null</code>.
 @throws IndexOutOfBoundsException
 if <code>index < 0</code>, <code>index</code> is greater than the
 length of <code>seq</code>, or if there are not enough values in
 <code>seq</code> to skip <code>codePointOffset</code> code points
 forwards or backwards (if <code>codePointOffset</code> is
 negative) from <code>index</code>.
 @since 1.5
 */
+ (jint)offsetByCodePointsWithJavaLangCharSequence:(id<JavaLangCharSequence>)seq
                                           withInt:(jint)index
                                           withInt:(jint)codePointOffset;

/*!
 @brief Reverses the order of the first and second byte in the specified
 character.
 @param c
 the character to reverse.
 @return the character with reordered bytes.
 */
+ (jchar)reverseBytesWithChar:(jchar)c;

/*!
 @brief Converts the specified Unicode code point into a UTF-16 encoded sequence
 and returns it as a char array.
 @param codePoint
 the Unicode code point to encode.
 @return the UTF-16 encoded char sequence. If <code>codePoint</code> is a
 <code>supplementary code point</code>,
 then the returned array contains two characters, otherwise it
 contains just one character.
 @throws IllegalArgumentException if <code>codePoint</code> is not a valid code point.
 @since 1.5
 */
+ (IOSCharArray *)toCharsWithInt:(jint)codePoint;

/*!
 @brief Converts the specified Unicode code point into a UTF-16 encoded sequence
 and copies the value(s) into the char array <code>dst</code>, starting at
 index <code>dstIndex</code>.
 @param codePoint
 the Unicode code point to encode.
 @param dst
 the destination array to copy the encoded value into.
 @param dstIndex
 the index in <code>dst</code> from where to start copying.
 @return the number of <code>char</code> value units copied into <code>dst</code>.
 @throws IllegalArgumentException if <code>codePoint</code> is not a valid code point.
 @throws NullPointerException
 if <code>dst</code> is <code>null</code>.
 @throws IndexOutOfBoundsException
 if <code>dstIndex</code> is negative, greater than or equal to
 <code>dst.length</code> or equals <code>dst.length - 1</code> when
 <code>codePoint</code> is a
 <code>supplementary code point</code>.
 @since 1.5
 */
+ (jint)toCharsWithInt:(jint)codePoint
         withCharArray:(IOSCharArray *)dst
               withInt:(jint)dstIndex;

/*!
 @brief Converts a surrogate pair into a Unicode code point.
 This method assumes
 that the pair are valid surrogates. If the pair are <i>not</i> valid
 surrogates, then the result is indeterminate. The
 <code>isSurrogatePair(char,char)</code> method should be used prior to this
 method to validate the pair.
 @param high
 the high surrogate unit.
 @param low
 the low surrogate unit.
 @return the Unicode code point corresponding to the surrogate unit pair.
 - seealso: #isSurrogatePair(char,char)
 @since 1.5
 */
+ (jint)toCodePointWithChar:(jchar)high
                   withChar:(jchar)low;

/*!
 @brief Returns the lower case equivalent for the specified character if the
 character is an upper case letter.
 Otherwise, the specified character is
 returned unchanged.
 @param c
 the character
 @return if <code>c</code> is an upper case character then its lower case
 counterpart, otherwise just <code>c</code>.
 */
+ (jchar)toLowerCaseWithChar:(jchar)c;

/*!
 @brief Returns the lower case equivalent for the specified code point if it is
 an upper case letter.
 Otherwise, the specified code point is returned
 unchanged.
 @param codePoint
 the code point to check.
 @return if <code>codePoint</code> is an upper case character then its lower
 case counterpart, otherwise just <code>codePoint</code>.
 */
+ (jint)toLowerCaseWithInt:(jint)codePoint;

- (NSString *)description;

/*!
 @brief Converts the specified character to its string representation.
 @param value
 the character to convert.
 @return the character converted to a string.
 */
+ (NSString *)toStringWithChar:(jchar)value;

/*!
 @brief Returns the title case equivalent for the specified character if it
 exists.
 Otherwise, the specified character is returned unchanged.
 @param c
 the character to convert.
 @return the title case equivalent of <code>c</code> if it exists, otherwise
 <code>c</code>.
 */
+ (jchar)toTitleCaseWithChar:(jchar)c;

/*!
 @brief Returns the title case equivalent for the specified code point if it
 exists.
 Otherwise, the specified code point is returned unchanged.
 @param codePoint
 the code point to convert.
 @return the title case equivalent of <code>codePoint</code> if it exists,
 otherwise <code>codePoint</code>.
 */
+ (jint)toTitleCaseWithInt:(jint)codePoint;

/*!
 @brief Returns the upper case equivalent for the specified character if the
 character is a lower case letter.
 Otherwise, the specified character is
 returned unchanged.
 @param c
 the character to convert.
 @return if <code>c</code> is a lower case character then its upper case
 counterpart, otherwise just <code>c</code>.
 */
+ (jchar)toUpperCaseWithChar:(jchar)c;

/*!
 @brief Returns the upper case equivalent for the specified code point if the
 code point is a lower case letter.
 Otherwise, the specified code point is
 returned unchanged.
 @param codePoint
 the code point to convert.
 @return if <code>codePoint</code> is a lower case character then its upper
 case counterpart, otherwise just <code>codePoint</code>.
 */
+ (jint)toUpperCaseWithInt:(jint)codePoint;

/*!
 @brief Returns a <code>Character</code> instance for the <code>char</code> value passed.
 <p>
 If it is not necessary to get a new <code>Character</code> instance, it is
 recommended to use this method instead of the constructor, since it
 maintains a cache of instances which may result in better performance.
 @param c
 the char value for which to get a <code>Character</code> instance.
 @return the <code>Character</code> instance for <code>c</code>.
 @since 1.5
 */
+ (JavaLangCharacter *)valueOfWithChar:(jchar)c;

#pragma mark Package-Private

@end

J2OBJC_STATIC_INIT(JavaLangCharacter)

/*!
 @brief The minimum <code>Character</code> value.
 */
inline jchar JavaLangCharacter_get_MIN_VALUE();
#define JavaLangCharacter_MIN_VALUE 0x0000
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, MIN_VALUE, jchar)

/*!
 @brief The maximum <code>Character</code> value.
 */
inline jchar JavaLangCharacter_get_MAX_VALUE();
#define JavaLangCharacter_MAX_VALUE 0xffff
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, MAX_VALUE, jchar)

/*!
 @brief The minimum radix used for conversions between characters and integers.
 */
inline jint JavaLangCharacter_get_MIN_RADIX();
#define JavaLangCharacter_MIN_RADIX 2
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, MIN_RADIX, jint)

/*!
 @brief The maximum radix used for conversions between characters and integers.
 */
inline jint JavaLangCharacter_get_MAX_RADIX();
#define JavaLangCharacter_MAX_RADIX 36
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, MAX_RADIX, jint)

/*!
 @brief The <code>Class</code> object that represents the primitive type <code>char</code>.
 */
inline IOSClass *JavaLangCharacter_get_TYPE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSClass *JavaLangCharacter_TYPE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter, TYPE, IOSClass *)

/*!
 @brief Unicode category constant Cn.
 */
inline jbyte JavaLangCharacter_get_UNASSIGNED();
#define JavaLangCharacter_UNASSIGNED 0
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, UNASSIGNED, jbyte)

/*!
 @brief Unicode category constant Lu.
 */
inline jbyte JavaLangCharacter_get_UPPERCASE_LETTER();
#define JavaLangCharacter_UPPERCASE_LETTER 1
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, UPPERCASE_LETTER, jbyte)

/*!
 @brief Unicode category constant Ll.
 */
inline jbyte JavaLangCharacter_get_LOWERCASE_LETTER();
#define JavaLangCharacter_LOWERCASE_LETTER 2
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, LOWERCASE_LETTER, jbyte)

/*!
 @brief Unicode category constant Lt.
 */
inline jbyte JavaLangCharacter_get_TITLECASE_LETTER();
#define JavaLangCharacter_TITLECASE_LETTER 3
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, TITLECASE_LETTER, jbyte)

/*!
 @brief Unicode category constant Lm.
 */
inline jbyte JavaLangCharacter_get_MODIFIER_LETTER();
#define JavaLangCharacter_MODIFIER_LETTER 4
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, MODIFIER_LETTER, jbyte)

/*!
 @brief Unicode category constant Lo.
 */
inline jbyte JavaLangCharacter_get_OTHER_LETTER();
#define JavaLangCharacter_OTHER_LETTER 5
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, OTHER_LETTER, jbyte)

/*!
 @brief Unicode category constant Mn.
 */
inline jbyte JavaLangCharacter_get_NON_SPACING_MARK();
#define JavaLangCharacter_NON_SPACING_MARK 6
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, NON_SPACING_MARK, jbyte)

/*!
 @brief Unicode category constant Me.
 */
inline jbyte JavaLangCharacter_get_ENCLOSING_MARK();
#define JavaLangCharacter_ENCLOSING_MARK 7
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, ENCLOSING_MARK, jbyte)

/*!
 @brief Unicode category constant Mc.
 */
inline jbyte JavaLangCharacter_get_COMBINING_SPACING_MARK();
#define JavaLangCharacter_COMBINING_SPACING_MARK 8
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, COMBINING_SPACING_MARK, jbyte)

/*!
 @brief Unicode category constant Nd.
 */
inline jbyte JavaLangCharacter_get_DECIMAL_DIGIT_NUMBER();
#define JavaLangCharacter_DECIMAL_DIGIT_NUMBER 9
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, DECIMAL_DIGIT_NUMBER, jbyte)

/*!
 @brief Unicode category constant Nl.
 */
inline jbyte JavaLangCharacter_get_LETTER_NUMBER();
#define JavaLangCharacter_LETTER_NUMBER 10
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, LETTER_NUMBER, jbyte)

/*!
 @brief Unicode category constant No.
 */
inline jbyte JavaLangCharacter_get_OTHER_NUMBER();
#define JavaLangCharacter_OTHER_NUMBER 11
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, OTHER_NUMBER, jbyte)

/*!
 @brief Unicode category constant Zs.
 */
inline jbyte JavaLangCharacter_get_SPACE_SEPARATOR();
#define JavaLangCharacter_SPACE_SEPARATOR 12
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, SPACE_SEPARATOR, jbyte)

/*!
 @brief Unicode category constant Zl.
 */
inline jbyte JavaLangCharacter_get_LINE_SEPARATOR();
#define JavaLangCharacter_LINE_SEPARATOR 13
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, LINE_SEPARATOR, jbyte)

/*!
 @brief Unicode category constant Zp.
 */
inline jbyte JavaLangCharacter_get_PARAGRAPH_SEPARATOR();
#define JavaLangCharacter_PARAGRAPH_SEPARATOR 14
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, PARAGRAPH_SEPARATOR, jbyte)

/*!
 @brief Unicode category constant Cc.
 */
inline jbyte JavaLangCharacter_get_CONTROL();
#define JavaLangCharacter_CONTROL 15
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, CONTROL, jbyte)

/*!
 @brief Unicode category constant Cf.
 */
inline jbyte JavaLangCharacter_get_FORMAT();
#define JavaLangCharacter_FORMAT 16
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, FORMAT, jbyte)

/*!
 @brief Unicode category constant Co.
 */
inline jbyte JavaLangCharacter_get_PRIVATE_USE();
#define JavaLangCharacter_PRIVATE_USE 18
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, PRIVATE_USE, jbyte)

/*!
 @brief Unicode category constant Cs.
 */
inline jbyte JavaLangCharacter_get_SURROGATE();
#define JavaLangCharacter_SURROGATE 19
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, SURROGATE, jbyte)

/*!
 @brief Unicode category constant Pd.
 */
inline jbyte JavaLangCharacter_get_DASH_PUNCTUATION();
#define JavaLangCharacter_DASH_PUNCTUATION 20
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, DASH_PUNCTUATION, jbyte)

/*!
 @brief Unicode category constant Ps.
 */
inline jbyte JavaLangCharacter_get_START_PUNCTUATION();
#define JavaLangCharacter_START_PUNCTUATION 21
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, START_PUNCTUATION, jbyte)

/*!
 @brief Unicode category constant Pe.
 */
inline jbyte JavaLangCharacter_get_END_PUNCTUATION();
#define JavaLangCharacter_END_PUNCTUATION 22
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, END_PUNCTUATION, jbyte)

/*!
 @brief Unicode category constant Pc.
 */
inline jbyte JavaLangCharacter_get_CONNECTOR_PUNCTUATION();
#define JavaLangCharacter_CONNECTOR_PUNCTUATION 23
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, CONNECTOR_PUNCTUATION, jbyte)

/*!
 @brief Unicode category constant Po.
 */
inline jbyte JavaLangCharacter_get_OTHER_PUNCTUATION();
#define JavaLangCharacter_OTHER_PUNCTUATION 24
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, OTHER_PUNCTUATION, jbyte)

/*!
 @brief Unicode category constant Sm.
 */
inline jbyte JavaLangCharacter_get_MATH_SYMBOL();
#define JavaLangCharacter_MATH_SYMBOL 25
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, MATH_SYMBOL, jbyte)

/*!
 @brief Unicode category constant Sc.
 */
inline jbyte JavaLangCharacter_get_CURRENCY_SYMBOL();
#define JavaLangCharacter_CURRENCY_SYMBOL 26
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, CURRENCY_SYMBOL, jbyte)

/*!
 @brief Unicode category constant Sk.
 */
inline jbyte JavaLangCharacter_get_MODIFIER_SYMBOL();
#define JavaLangCharacter_MODIFIER_SYMBOL 27
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, MODIFIER_SYMBOL, jbyte)

/*!
 @brief Unicode category constant So.
 */
inline jbyte JavaLangCharacter_get_OTHER_SYMBOL();
#define JavaLangCharacter_OTHER_SYMBOL 28
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, OTHER_SYMBOL, jbyte)

/*!
 @brief Unicode category constant Pi.
 @since 1.4
 */
inline jbyte JavaLangCharacter_get_INITIAL_QUOTE_PUNCTUATION();
#define JavaLangCharacter_INITIAL_QUOTE_PUNCTUATION 29
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, INITIAL_QUOTE_PUNCTUATION, jbyte)

/*!
 @brief Unicode category constant Pf.
 @since 1.4
 */
inline jbyte JavaLangCharacter_get_FINAL_QUOTE_PUNCTUATION();
#define JavaLangCharacter_FINAL_QUOTE_PUNCTUATION 30
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, FINAL_QUOTE_PUNCTUATION, jbyte)

/*!
 @brief Unicode bidirectional constant.
 @since 1.4
 */
inline jbyte JavaLangCharacter_get_DIRECTIONALITY_UNDEFINED();
#define JavaLangCharacter_DIRECTIONALITY_UNDEFINED -1
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, DIRECTIONALITY_UNDEFINED, jbyte)

/*!
 @brief Unicode bidirectional constant L.
 @since 1.4
 */
inline jbyte JavaLangCharacter_get_DIRECTIONALITY_LEFT_TO_RIGHT();
#define JavaLangCharacter_DIRECTIONALITY_LEFT_TO_RIGHT 0
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, DIRECTIONALITY_LEFT_TO_RIGHT, jbyte)

/*!
 @brief Unicode bidirectional constant R.
 @since 1.4
 */
inline jbyte JavaLangCharacter_get_DIRECTIONALITY_RIGHT_TO_LEFT();
#define JavaLangCharacter_DIRECTIONALITY_RIGHT_TO_LEFT 1
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, DIRECTIONALITY_RIGHT_TO_LEFT, jbyte)

/*!
 @brief Unicode bidirectional constant AL.
 @since 1.4
 */
inline jbyte JavaLangCharacter_get_DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC();
#define JavaLangCharacter_DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC 2
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC, jbyte)

/*!
 @brief Unicode bidirectional constant EN.
 @since 1.4
 */
inline jbyte JavaLangCharacter_get_DIRECTIONALITY_EUROPEAN_NUMBER();
#define JavaLangCharacter_DIRECTIONALITY_EUROPEAN_NUMBER 3
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, DIRECTIONALITY_EUROPEAN_NUMBER, jbyte)

/*!
 @brief Unicode bidirectional constant ES.
 @since 1.4
 */
inline jbyte JavaLangCharacter_get_DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR();
#define JavaLangCharacter_DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR 4
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR, jbyte)

/*!
 @brief Unicode bidirectional constant ET.
 @since 1.4
 */
inline jbyte JavaLangCharacter_get_DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR();
#define JavaLangCharacter_DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR 5
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR, jbyte)

/*!
 @brief Unicode bidirectional constant AN.
 @since 1.4
 */
inline jbyte JavaLangCharacter_get_DIRECTIONALITY_ARABIC_NUMBER();
#define JavaLangCharacter_DIRECTIONALITY_ARABIC_NUMBER 6
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, DIRECTIONALITY_ARABIC_NUMBER, jbyte)

/*!
 @brief Unicode bidirectional constant CS.
 @since 1.4
 */
inline jbyte JavaLangCharacter_get_DIRECTIONALITY_COMMON_NUMBER_SEPARATOR();
#define JavaLangCharacter_DIRECTIONALITY_COMMON_NUMBER_SEPARATOR 7
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, DIRECTIONALITY_COMMON_NUMBER_SEPARATOR, jbyte)

/*!
 @brief Unicode bidirectional constant NSM.
 @since 1.4
 */
inline jbyte JavaLangCharacter_get_DIRECTIONALITY_NONSPACING_MARK();
#define JavaLangCharacter_DIRECTIONALITY_NONSPACING_MARK 8
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, DIRECTIONALITY_NONSPACING_MARK, jbyte)

/*!
 @brief Unicode bidirectional constant BN.
 @since 1.4
 */
inline jbyte JavaLangCharacter_get_DIRECTIONALITY_BOUNDARY_NEUTRAL();
#define JavaLangCharacter_DIRECTIONALITY_BOUNDARY_NEUTRAL 9
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, DIRECTIONALITY_BOUNDARY_NEUTRAL, jbyte)

/*!
 @brief Unicode bidirectional constant B.
 @since 1.4
 */
inline jbyte JavaLangCharacter_get_DIRECTIONALITY_PARAGRAPH_SEPARATOR();
#define JavaLangCharacter_DIRECTIONALITY_PARAGRAPH_SEPARATOR 10
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, DIRECTIONALITY_PARAGRAPH_SEPARATOR, jbyte)

/*!
 @brief Unicode bidirectional constant S.
 @since 1.4
 */
inline jbyte JavaLangCharacter_get_DIRECTIONALITY_SEGMENT_SEPARATOR();
#define JavaLangCharacter_DIRECTIONALITY_SEGMENT_SEPARATOR 11
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, DIRECTIONALITY_SEGMENT_SEPARATOR, jbyte)

/*!
 @brief Unicode bidirectional constant WS.
 @since 1.4
 */
inline jbyte JavaLangCharacter_get_DIRECTIONALITY_WHITESPACE();
#define JavaLangCharacter_DIRECTIONALITY_WHITESPACE 12
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, DIRECTIONALITY_WHITESPACE, jbyte)

/*!
 @brief Unicode bidirectional constant ON.
 @since 1.4
 */
inline jbyte JavaLangCharacter_get_DIRECTIONALITY_OTHER_NEUTRALS();
#define JavaLangCharacter_DIRECTIONALITY_OTHER_NEUTRALS 13
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, DIRECTIONALITY_OTHER_NEUTRALS, jbyte)

/*!
 @brief Unicode bidirectional constant LRE.
 @since 1.4
 */
inline jbyte JavaLangCharacter_get_DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING();
#define JavaLangCharacter_DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING 14
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING, jbyte)

/*!
 @brief Unicode bidirectional constant LRO.
 @since 1.4
 */
inline jbyte JavaLangCharacter_get_DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE();
#define JavaLangCharacter_DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE 15
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE, jbyte)

/*!
 @brief Unicode bidirectional constant RLE.
 @since 1.4
 */
inline jbyte JavaLangCharacter_get_DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING();
#define JavaLangCharacter_DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING 16
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING, jbyte)

/*!
 @brief Unicode bidirectional constant RLO.
 @since 1.4
 */
inline jbyte JavaLangCharacter_get_DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE();
#define JavaLangCharacter_DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE 17
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE, jbyte)

/*!
 @brief Unicode bidirectional constant PDF.
 @since 1.4
 */
inline jbyte JavaLangCharacter_get_DIRECTIONALITY_POP_DIRECTIONAL_FORMAT();
#define JavaLangCharacter_DIRECTIONALITY_POP_DIRECTIONAL_FORMAT 18
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, DIRECTIONALITY_POP_DIRECTIONAL_FORMAT, jbyte)

/*!
 @brief The minimum value of a high surrogate or leading surrogate unit in UTF-16
 encoding, <code>'\uD800'</code>.
 @since 1.5
 */
inline jchar JavaLangCharacter_get_MIN_HIGH_SURROGATE();
#define JavaLangCharacter_MIN_HIGH_SURROGATE 0xd800
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, MIN_HIGH_SURROGATE, jchar)

/*!
 @brief The maximum value of a high surrogate or leading surrogate unit in UTF-16
 encoding, <code>'\uDBFF'</code>.
 @since 1.5
 */
inline jchar JavaLangCharacter_get_MAX_HIGH_SURROGATE();
#define JavaLangCharacter_MAX_HIGH_SURROGATE 0xdbff
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, MAX_HIGH_SURROGATE, jchar)

/*!
 @brief The minimum value of a low surrogate or trailing surrogate unit in UTF-16
 encoding, <code>'\uDC00'</code>.
 @since 1.5
 */
inline jchar JavaLangCharacter_get_MIN_LOW_SURROGATE();
#define JavaLangCharacter_MIN_LOW_SURROGATE 0xdc00
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, MIN_LOW_SURROGATE, jchar)

/*!
 @brief The maximum value of a low surrogate or trailing surrogate unit in UTF-16
 encoding, <code>'\uDFFF'</code>.
 @since 1.5
 */
inline jchar JavaLangCharacter_get_MAX_LOW_SURROGATE();
#define JavaLangCharacter_MAX_LOW_SURROGATE 0xdfff
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, MAX_LOW_SURROGATE, jchar)

/*!
 @brief The minimum value of a surrogate unit in UTF-16 encoding, <code>'\uD800'</code>.
 @since 1.5
 */
inline jchar JavaLangCharacter_get_MIN_SURROGATE();
#define JavaLangCharacter_MIN_SURROGATE 0xd800
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, MIN_SURROGATE, jchar)

/*!
 @brief The maximum value of a surrogate unit in UTF-16 encoding, <code>'\uDFFF'</code>.
 @since 1.5
 */
inline jchar JavaLangCharacter_get_MAX_SURROGATE();
#define JavaLangCharacter_MAX_SURROGATE 0xdfff
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, MAX_SURROGATE, jchar)

/*!
 @brief The minimum value of a supplementary code point, <code>U+010000</code>.
 @since 1.5
 */
inline jint JavaLangCharacter_get_MIN_SUPPLEMENTARY_CODE_POINT();
#define JavaLangCharacter_MIN_SUPPLEMENTARY_CODE_POINT 65536
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, MIN_SUPPLEMENTARY_CODE_POINT, jint)

/*!
 @brief The minimum code point value, <code>U+0000</code>.
 @since 1.5
 */
inline jint JavaLangCharacter_get_MIN_CODE_POINT();
#define JavaLangCharacter_MIN_CODE_POINT 0
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, MIN_CODE_POINT, jint)

/*!
 @brief The maximum code point value, <code>U+10FFFF</code>.
 @since 1.5
 */
inline jint JavaLangCharacter_get_MAX_CODE_POINT();
#define JavaLangCharacter_MAX_CODE_POINT 1114111
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, MAX_CODE_POINT, jint)

/*!
 @brief The number of bits required to represent a <code>Character</code> value
 unsigned form.
 @since 1.5
 */
inline jint JavaLangCharacter_get_SIZE();
#define JavaLangCharacter_SIZE 16
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, SIZE, jint)

FOUNDATION_EXPORT void JavaLangCharacter_initWithChar_(JavaLangCharacter *self, jchar value);

FOUNDATION_EXPORT JavaLangCharacter *new_JavaLangCharacter_initWithChar_(jchar value) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaLangCharacter *create_JavaLangCharacter_initWithChar_(jchar value);

FOUNDATION_EXPORT jint JavaLangCharacter_compareWithChar_withChar_(jchar lhs, jchar rhs);

FOUNDATION_EXPORT JavaLangCharacter *JavaLangCharacter_valueOfWithChar_(jchar c);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isValidCodePointWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isSupplementaryCodePointWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isHighSurrogateWithChar_(jchar ch);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isLowSurrogateWithChar_(jchar ch);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isSurrogateWithChar_(jchar ch);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isSurrogatePairWithChar_withChar_(jchar high, jchar low);

FOUNDATION_EXPORT jint JavaLangCharacter_charCountWithInt_(jint codePoint);

FOUNDATION_EXPORT jint JavaLangCharacter_toCodePointWithChar_withChar_(jchar high, jchar low);

FOUNDATION_EXPORT jint JavaLangCharacter_codePointAtWithJavaLangCharSequence_withInt_(id<JavaLangCharSequence> seq, jint index);

FOUNDATION_EXPORT jint JavaLangCharacter_codePointAtWithCharArray_withInt_(IOSCharArray *seq, jint index);

FOUNDATION_EXPORT jint JavaLangCharacter_codePointAtWithCharArray_withInt_withInt_(IOSCharArray *seq, jint index, jint limit);

FOUNDATION_EXPORT jint JavaLangCharacter_codePointBeforeWithJavaLangCharSequence_withInt_(id<JavaLangCharSequence> seq, jint index);

FOUNDATION_EXPORT jint JavaLangCharacter_codePointBeforeWithCharArray_withInt_(IOSCharArray *seq, jint index);

FOUNDATION_EXPORT jint JavaLangCharacter_codePointBeforeWithCharArray_withInt_withInt_(IOSCharArray *seq, jint index, jint start);

FOUNDATION_EXPORT jint JavaLangCharacter_toCharsWithInt_withCharArray_withInt_(jint codePoint, IOSCharArray *dst, jint dstIndex);

FOUNDATION_EXPORT IOSCharArray *JavaLangCharacter_toCharsWithInt_(jint codePoint);

FOUNDATION_EXPORT jint JavaLangCharacter_codePointCountWithJavaLangCharSequence_withInt_withInt_(id<JavaLangCharSequence> seq, jint beginIndex, jint endIndex);

FOUNDATION_EXPORT jint JavaLangCharacter_codePointCountWithCharArray_withInt_withInt_(IOSCharArray *seq, jint offset, jint count);

FOUNDATION_EXPORT jint JavaLangCharacter_offsetByCodePointsWithJavaLangCharSequence_withInt_withInt_(id<JavaLangCharSequence> seq, jint index, jint codePointOffset);

FOUNDATION_EXPORT jint JavaLangCharacter_offsetByCodePointsWithCharArray_withInt_withInt_withInt_withInt_(IOSCharArray *seq, jint start, jint count, jint index, jint codePointOffset);

FOUNDATION_EXPORT jint JavaLangCharacter_digitWithChar_withInt_(jchar c, jint radix);

FOUNDATION_EXPORT jint JavaLangCharacter_digitWithInt_withInt_(jint codePoint, jint radix);

FOUNDATION_EXPORT jchar JavaLangCharacter_forDigitWithInt_withInt_(jint digit, jint radix);

FOUNDATION_EXPORT NSString *JavaLangCharacter_getNameWithInt_(jint codePoint);

FOUNDATION_EXPORT jint JavaLangCharacter_getNumericValueWithChar_(jchar c);

FOUNDATION_EXPORT jint JavaLangCharacter_getNumericValueWithInt_(jint codePoint);

FOUNDATION_EXPORT jint JavaLangCharacter_getTypeWithChar_(jchar c);

FOUNDATION_EXPORT jint JavaLangCharacter_getTypeWithInt_(jint codePoint);

FOUNDATION_EXPORT jbyte JavaLangCharacter_getDirectionalityWithChar_(jchar c);

FOUNDATION_EXPORT jbyte JavaLangCharacter_getDirectionalityWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isMirroredWithChar_(jchar c);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isMirroredWithInt_(jint codePoint);

FOUNDATION_EXPORT jchar JavaLangCharacter_highSurrogateWithInt_(jint codePoint);

FOUNDATION_EXPORT jchar JavaLangCharacter_lowSurrogateWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isAlphabeticWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isBmpCodePointWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isDefinedWithChar_(jchar c);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isDefinedWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isDigitWithChar_(jchar c);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isDigitWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isIdentifierIgnorableWithChar_(jchar c);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isIdeographicWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isIdentifierIgnorableWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isISOControlWithChar_(jchar c);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isISOControlWithInt_(jint c);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isJavaIdentifierPartWithChar_(jchar c);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isJavaIdentifierPartWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isJavaIdentifierStartWithChar_(jchar c);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isJavaIdentifierStartWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isJavaLetterWithChar_(jchar c);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isJavaLetterOrDigitWithChar_(jchar c);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isLetterWithChar_(jchar c);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isLetterWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isLetterOrDigitWithChar_(jchar c);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isLetterOrDigitWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isLowerCaseWithChar_(jchar c);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isLowerCaseWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isSpaceWithChar_(jchar c);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isSpaceCharWithChar_(jchar c);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isSpaceCharWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isTitleCaseWithChar_(jchar c);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isTitleCaseWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isUnicodeIdentifierPartWithChar_(jchar c);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isUnicodeIdentifierPartWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isUnicodeIdentifierStartWithChar_(jchar c);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isUnicodeIdentifierStartWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isUpperCaseWithChar_(jchar c);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isUpperCaseWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isWhitespaceWithChar_(jchar c);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isWhitespaceWithInt_(jint codePoint);

FOUNDATION_EXPORT jchar JavaLangCharacter_reverseBytesWithChar_(jchar c);

FOUNDATION_EXPORT jchar JavaLangCharacter_toLowerCaseWithChar_(jchar c);

FOUNDATION_EXPORT jint JavaLangCharacter_toLowerCaseWithInt_(jint codePoint);

FOUNDATION_EXPORT NSString *JavaLangCharacter_toStringWithChar_(jchar value);

FOUNDATION_EXPORT jchar JavaLangCharacter_toTitleCaseWithChar_(jchar c);

FOUNDATION_EXPORT jint JavaLangCharacter_toTitleCaseWithInt_(jint codePoint);

FOUNDATION_EXPORT jchar JavaLangCharacter_toUpperCaseWithChar_(jchar c);

FOUNDATION_EXPORT jint JavaLangCharacter_toUpperCaseWithInt_(jint codePoint);

J2OBJC_TYPE_LITERAL_HEADER(JavaLangCharacter)

BOXED_INC_AND_DEC(Char, charValue, JavaLangCharacter)

#endif

#if !defined (JavaLangCharacter_Subset_) && (INCLUDE_ALL_JavaLangCharacter || defined(INCLUDE_JavaLangCharacter_Subset))
#define JavaLangCharacter_Subset_

@interface JavaLangCharacter_Subset : NSObject

#pragma mark Public

/*!
 @brief Compares this character subset for identity with the specified object.
 */
- (jboolean)isEqual:(id)object;

/*!
 @brief Returns this subset's hash code, which is the hash code computed by
 <code>java.lang.Object.hashCode()</code>.
 */
- (NSUInteger)hash;

/*!
 @brief Returns this subset's name.
 */
- (NSString *)description;

#pragma mark Protected

/*!
 @brief Constructs a new <code>Subset</code>.
 */
- (instancetype)initWithNSString:(NSString *)name;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaLangCharacter_Subset)

FOUNDATION_EXPORT void JavaLangCharacter_Subset_initWithNSString_(JavaLangCharacter_Subset *self, NSString *name);

FOUNDATION_EXPORT JavaLangCharacter_Subset *new_JavaLangCharacter_Subset_initWithNSString_(NSString *name) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaLangCharacter_Subset *create_JavaLangCharacter_Subset_initWithNSString_(NSString *name);

J2OBJC_TYPE_LITERAL_HEADER(JavaLangCharacter_Subset)

#endif

#if !defined (JavaLangCharacter_UnicodeBlock_) && (INCLUDE_ALL_JavaLangCharacter || defined(INCLUDE_JavaLangCharacter_UnicodeBlock))
#define JavaLangCharacter_UnicodeBlock_

@class IOSObjectArray;

/*!
 @brief Represents a block of Unicode characters.
 This class provides constants for various
 well-known blocks (but not all blocks) and methods for looking up a block
 by name <code>forName</code> or by code point <code>of</code>.
 @since 1.2
 */
@interface JavaLangCharacter_UnicodeBlock : JavaLangCharacter_Subset {
 @public
  jint rangeStart_;
  jint rangeEnd_;
}

+ (JavaLangCharacter_UnicodeBlock *)SURROGATES_AREA;

+ (JavaLangCharacter_UnicodeBlock *)BASIC_LATIN;

+ (JavaLangCharacter_UnicodeBlock *)LATIN_1_SUPPLEMENT;

+ (JavaLangCharacter_UnicodeBlock *)LATIN_EXTENDED_A;

+ (JavaLangCharacter_UnicodeBlock *)LATIN_EXTENDED_B;

+ (JavaLangCharacter_UnicodeBlock *)IPA_EXTENSIONS;

+ (JavaLangCharacter_UnicodeBlock *)SPACING_MODIFIER_LETTERS;

+ (JavaLangCharacter_UnicodeBlock *)COMBINING_DIACRITICAL_MARKS;

+ (JavaLangCharacter_UnicodeBlock *)GREEK;

+ (JavaLangCharacter_UnicodeBlock *)CYRILLIC;

+ (JavaLangCharacter_UnicodeBlock *)CYRILLIC_SUPPLEMENTARY;

+ (JavaLangCharacter_UnicodeBlock *)ARMENIAN;

+ (JavaLangCharacter_UnicodeBlock *)HEBREW;

+ (JavaLangCharacter_UnicodeBlock *)ARABIC;

+ (JavaLangCharacter_UnicodeBlock *)SYRIAC;

+ (JavaLangCharacter_UnicodeBlock *)THAANA;

+ (JavaLangCharacter_UnicodeBlock *)DEVANAGARI;

+ (JavaLangCharacter_UnicodeBlock *)BENGALI;

+ (JavaLangCharacter_UnicodeBlock *)GURMUKHI;

+ (JavaLangCharacter_UnicodeBlock *)GUJARATI;

+ (JavaLangCharacter_UnicodeBlock *)ORIYA;

+ (JavaLangCharacter_UnicodeBlock *)TAMIL;

+ (JavaLangCharacter_UnicodeBlock *)TELUGU;

+ (JavaLangCharacter_UnicodeBlock *)KANNADA;

+ (JavaLangCharacter_UnicodeBlock *)MALAYALAM;

+ (JavaLangCharacter_UnicodeBlock *)SINHALA;

+ (JavaLangCharacter_UnicodeBlock *)THAI;

+ (JavaLangCharacter_UnicodeBlock *)LAO;

+ (JavaLangCharacter_UnicodeBlock *)TIBETAN;

+ (JavaLangCharacter_UnicodeBlock *)MYANMAR;

+ (JavaLangCharacter_UnicodeBlock *)GEORGIAN;

+ (JavaLangCharacter_UnicodeBlock *)HANGUL_JAMO;

+ (JavaLangCharacter_UnicodeBlock *)ETHIOPIC;

+ (JavaLangCharacter_UnicodeBlock *)CHEROKEE;

+ (JavaLangCharacter_UnicodeBlock *)UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS;

+ (JavaLangCharacter_UnicodeBlock *)OGHAM;

+ (JavaLangCharacter_UnicodeBlock *)RUNIC;

+ (JavaLangCharacter_UnicodeBlock *)TAGALOG;

+ (JavaLangCharacter_UnicodeBlock *)HANUNOO;

+ (JavaLangCharacter_UnicodeBlock *)BUHID;

+ (JavaLangCharacter_UnicodeBlock *)TAGBANWA;

+ (JavaLangCharacter_UnicodeBlock *)KHMER;

+ (JavaLangCharacter_UnicodeBlock *)MONGOLIAN;

+ (JavaLangCharacter_UnicodeBlock *)LIMBU;

+ (JavaLangCharacter_UnicodeBlock *)TAI_LE;

+ (JavaLangCharacter_UnicodeBlock *)KHMER_SYMBOLS;

+ (JavaLangCharacter_UnicodeBlock *)PHONETIC_EXTENSIONS;

+ (JavaLangCharacter_UnicodeBlock *)LATIN_EXTENDED_ADDITIONAL;

+ (JavaLangCharacter_UnicodeBlock *)GREEK_EXTENDED;

+ (JavaLangCharacter_UnicodeBlock *)GENERAL_PUNCTUATION;

+ (JavaLangCharacter_UnicodeBlock *)SUPERSCRIPTS_AND_SUBSCRIPTS;

+ (JavaLangCharacter_UnicodeBlock *)CURRENCY_SYMBOLS;

+ (JavaLangCharacter_UnicodeBlock *)COMBINING_MARKS_FOR_SYMBOLS;

+ (JavaLangCharacter_UnicodeBlock *)LETTERLIKE_SYMBOLS;

+ (JavaLangCharacter_UnicodeBlock *)NUMBER_FORMS;

+ (JavaLangCharacter_UnicodeBlock *)ARROWS;

+ (JavaLangCharacter_UnicodeBlock *)MATHEMATICAL_OPERATORS;

+ (JavaLangCharacter_UnicodeBlock *)MISCELLANEOUS_TECHNICAL;

+ (JavaLangCharacter_UnicodeBlock *)CONTROL_PICTURES;

+ (JavaLangCharacter_UnicodeBlock *)OPTICAL_CHARACTER_RECOGNITION;

+ (JavaLangCharacter_UnicodeBlock *)ENCLOSED_ALPHANUMERICS;

+ (JavaLangCharacter_UnicodeBlock *)BOX_DRAWING;

+ (JavaLangCharacter_UnicodeBlock *)BLOCK_ELEMENTS;

+ (JavaLangCharacter_UnicodeBlock *)GEOMETRIC_SHAPES;

+ (JavaLangCharacter_UnicodeBlock *)MISCELLANEOUS_SYMBOLS;

+ (JavaLangCharacter_UnicodeBlock *)DINGBATS;

+ (JavaLangCharacter_UnicodeBlock *)MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A;

+ (JavaLangCharacter_UnicodeBlock *)SUPPLEMENTAL_ARROWS_A;

+ (JavaLangCharacter_UnicodeBlock *)BRAILLE_PATTERNS;

+ (JavaLangCharacter_UnicodeBlock *)SUPPLEMENTAL_ARROWS_B;

+ (JavaLangCharacter_UnicodeBlock *)MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B;

+ (JavaLangCharacter_UnicodeBlock *)SUPPLEMENTAL_MATHEMATICAL_OPERATORS;

+ (JavaLangCharacter_UnicodeBlock *)MISCELLANEOUS_SYMBOLS_AND_ARROWS;

+ (JavaLangCharacter_UnicodeBlock *)CJK_RADICALS_SUPPLEMENT;

+ (JavaLangCharacter_UnicodeBlock *)KANGXI_RADICALS;

+ (JavaLangCharacter_UnicodeBlock *)IDEOGRAPHIC_DESCRIPTION_CHARACTERS;

+ (JavaLangCharacter_UnicodeBlock *)CJK_SYMBOLS_AND_PUNCTUATION;

+ (JavaLangCharacter_UnicodeBlock *)HIRAGANA;

+ (JavaLangCharacter_UnicodeBlock *)KATAKANA;

+ (JavaLangCharacter_UnicodeBlock *)BOPOMOFO;

+ (JavaLangCharacter_UnicodeBlock *)HANGUL_COMPATIBILITY_JAMO;

+ (JavaLangCharacter_UnicodeBlock *)KANBUN;

+ (JavaLangCharacter_UnicodeBlock *)BOPOMOFO_EXTENDED;

+ (JavaLangCharacter_UnicodeBlock *)KATAKANA_PHONETIC_EXTENSIONS;

+ (JavaLangCharacter_UnicodeBlock *)ENCLOSED_CJK_LETTERS_AND_MONTHS;

+ (JavaLangCharacter_UnicodeBlock *)CJK_COMPATIBILITY;

+ (JavaLangCharacter_UnicodeBlock *)CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A;

+ (JavaLangCharacter_UnicodeBlock *)YIJING_HEXAGRAM_SYMBOLS;

+ (JavaLangCharacter_UnicodeBlock *)CJK_UNIFIED_IDEOGRAPHS;

+ (JavaLangCharacter_UnicodeBlock *)YI_SYLLABLES;

+ (JavaLangCharacter_UnicodeBlock *)YI_RADICALS;

+ (JavaLangCharacter_UnicodeBlock *)HANGUL_SYLLABLES;

+ (JavaLangCharacter_UnicodeBlock *)HIGH_SURROGATES;

+ (JavaLangCharacter_UnicodeBlock *)HIGH_PRIVATE_USE_SURROGATES;

+ (JavaLangCharacter_UnicodeBlock *)LOW_SURROGATES;

+ (JavaLangCharacter_UnicodeBlock *)PRIVATE_USE_AREA;

+ (JavaLangCharacter_UnicodeBlock *)CJK_COMPATIBILITY_IDEOGRAPHS;

+ (JavaLangCharacter_UnicodeBlock *)ALPHABETIC_PRESENTATION_FORMS;

+ (JavaLangCharacter_UnicodeBlock *)ARABIC_PRESENTATION_FORMS_A;

+ (JavaLangCharacter_UnicodeBlock *)VARIATION_SELECTORS;

+ (JavaLangCharacter_UnicodeBlock *)COMBINING_HALF_MARKS;

+ (JavaLangCharacter_UnicodeBlock *)CJK_COMPATIBILITY_FORMS;

+ (JavaLangCharacter_UnicodeBlock *)SMALL_FORM_VARIANTS;

+ (JavaLangCharacter_UnicodeBlock *)ARABIC_PRESENTATION_FORMS_B;

+ (JavaLangCharacter_UnicodeBlock *)HALFWIDTH_AND_FULLWIDTH_FORMS;

+ (JavaLangCharacter_UnicodeBlock *)SPECIALS;

+ (JavaLangCharacter_UnicodeBlock *)LINEAR_B_SYLLABARY;

+ (JavaLangCharacter_UnicodeBlock *)LINEAR_B_IDEOGRAMS;

+ (JavaLangCharacter_UnicodeBlock *)AEGEAN_NUMBERS;

+ (JavaLangCharacter_UnicodeBlock *)OLD_ITALIC;

+ (JavaLangCharacter_UnicodeBlock *)GOTHIC;

+ (JavaLangCharacter_UnicodeBlock *)UGARITIC;

+ (JavaLangCharacter_UnicodeBlock *)DESERET;

+ (JavaLangCharacter_UnicodeBlock *)SHAVIAN;

+ (JavaLangCharacter_UnicodeBlock *)OSMANYA;

+ (JavaLangCharacter_UnicodeBlock *)CYPRIOT_SYLLABARY;

+ (JavaLangCharacter_UnicodeBlock *)BYZANTINE_MUSICAL_SYMBOLS;

+ (JavaLangCharacter_UnicodeBlock *)MUSICAL_SYMBOLS;

+ (JavaLangCharacter_UnicodeBlock *)TAI_XUAN_JING_SYMBOLS;

+ (JavaLangCharacter_UnicodeBlock *)MATHEMATICAL_ALPHANUMERIC_SYMBOLS;

+ (JavaLangCharacter_UnicodeBlock *)CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B;

+ (JavaLangCharacter_UnicodeBlock *)CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT;

+ (JavaLangCharacter_UnicodeBlock *)TAGS;

+ (JavaLangCharacter_UnicodeBlock *)VARIATION_SELECTORS_SUPPLEMENT;

+ (JavaLangCharacter_UnicodeBlock *)SUPPLEMENTARY_PRIVATE_USE_AREA_A;

+ (JavaLangCharacter_UnicodeBlock *)SUPPLEMENTARY_PRIVATE_USE_AREA_B;

+ (JavaLangCharacter_UnicodeBlock *)ANCIENT_GREEK_MUSICAL_NOTATION;

+ (JavaLangCharacter_UnicodeBlock *)ANCIENT_GREEK_NUMBERS;

+ (JavaLangCharacter_UnicodeBlock *)ARABIC_SUPPLEMENT;

+ (JavaLangCharacter_UnicodeBlock *)BUGINESE;

+ (JavaLangCharacter_UnicodeBlock *)CJK_STROKES;

+ (JavaLangCharacter_UnicodeBlock *)COMBINING_DIACRITICAL_MARKS_SUPPLEMENT;

+ (JavaLangCharacter_UnicodeBlock *)COPTIC;

+ (JavaLangCharacter_UnicodeBlock *)ETHIOPIC_EXTENDED;

+ (JavaLangCharacter_UnicodeBlock *)ETHIOPIC_SUPPLEMENT;

+ (JavaLangCharacter_UnicodeBlock *)GEORGIAN_SUPPLEMENT;

+ (JavaLangCharacter_UnicodeBlock *)GLAGOLITIC;

+ (JavaLangCharacter_UnicodeBlock *)KHAROSHTHI;

+ (JavaLangCharacter_UnicodeBlock *)MODIFIER_TONE_LETTERS;

+ (JavaLangCharacter_UnicodeBlock *)NEW_TAI_LUE;

+ (JavaLangCharacter_UnicodeBlock *)OLD_PERSIAN;

+ (JavaLangCharacter_UnicodeBlock *)PHONETIC_EXTENSIONS_SUPPLEMENT;

+ (JavaLangCharacter_UnicodeBlock *)SUPPLEMENTAL_PUNCTUATION;

+ (JavaLangCharacter_UnicodeBlock *)SYLOTI_NAGRI;

+ (JavaLangCharacter_UnicodeBlock *)TIFINAGH;

+ (JavaLangCharacter_UnicodeBlock *)VERTICAL_FORMS;

+ (JavaLangCharacter_UnicodeBlock *)NKO;

+ (JavaLangCharacter_UnicodeBlock *)BALINESE;

+ (JavaLangCharacter_UnicodeBlock *)LATIN_EXTENDED_C;

+ (JavaLangCharacter_UnicodeBlock *)LATIN_EXTENDED_D;

+ (JavaLangCharacter_UnicodeBlock *)PHAGS_PA;

+ (JavaLangCharacter_UnicodeBlock *)PHOENICIAN;

+ (JavaLangCharacter_UnicodeBlock *)CUNEIFORM;

+ (JavaLangCharacter_UnicodeBlock *)CUNEIFORM_NUMBERS_AND_PUNCTUATION;

+ (JavaLangCharacter_UnicodeBlock *)COUNTING_ROD_NUMERALS;

+ (JavaLangCharacter_UnicodeBlock *)SUNDANESE;

+ (JavaLangCharacter_UnicodeBlock *)LEPCHA;

+ (JavaLangCharacter_UnicodeBlock *)OL_CHIKI;

+ (JavaLangCharacter_UnicodeBlock *)CYRILLIC_EXTENDED_A;

+ (JavaLangCharacter_UnicodeBlock *)VAI;

+ (JavaLangCharacter_UnicodeBlock *)CYRILLIC_EXTENDED_B;

+ (JavaLangCharacter_UnicodeBlock *)SAURASHTRA;

+ (JavaLangCharacter_UnicodeBlock *)KAYAH_LI;

+ (JavaLangCharacter_UnicodeBlock *)REJANG;

+ (JavaLangCharacter_UnicodeBlock *)CHAM;

+ (JavaLangCharacter_UnicodeBlock *)ANCIENT_SYMBOLS;

+ (JavaLangCharacter_UnicodeBlock *)PHAISTOS_DISC;

+ (JavaLangCharacter_UnicodeBlock *)LYCIAN;

+ (JavaLangCharacter_UnicodeBlock *)CARIAN;

+ (JavaLangCharacter_UnicodeBlock *)LYDIAN;

+ (JavaLangCharacter_UnicodeBlock *)MAHJONG_TILES;

+ (JavaLangCharacter_UnicodeBlock *)DOMINO_TILES;

+ (JavaLangCharacter_UnicodeBlock *)SAMARITAN;

+ (JavaLangCharacter_UnicodeBlock *)UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED;

+ (JavaLangCharacter_UnicodeBlock *)TAI_THAM;

+ (JavaLangCharacter_UnicodeBlock *)VEDIC_EXTENSIONS;

+ (JavaLangCharacter_UnicodeBlock *)LISU;

+ (JavaLangCharacter_UnicodeBlock *)BAMUM;

+ (JavaLangCharacter_UnicodeBlock *)COMMON_INDIC_NUMBER_FORMS;

+ (JavaLangCharacter_UnicodeBlock *)DEVANAGARI_EXTENDED;

+ (JavaLangCharacter_UnicodeBlock *)HANGUL_JAMO_EXTENDED_A;

+ (JavaLangCharacter_UnicodeBlock *)JAVANESE;

+ (JavaLangCharacter_UnicodeBlock *)MYANMAR_EXTENDED_A;

+ (JavaLangCharacter_UnicodeBlock *)TAI_VIET;

+ (JavaLangCharacter_UnicodeBlock *)MEETEI_MAYEK;

+ (JavaLangCharacter_UnicodeBlock *)HANGUL_JAMO_EXTENDED_B;

+ (JavaLangCharacter_UnicodeBlock *)IMPERIAL_ARAMAIC;

+ (JavaLangCharacter_UnicodeBlock *)OLD_SOUTH_ARABIAN;

+ (JavaLangCharacter_UnicodeBlock *)AVESTAN;

+ (JavaLangCharacter_UnicodeBlock *)INSCRIPTIONAL_PARTHIAN;

+ (JavaLangCharacter_UnicodeBlock *)INSCRIPTIONAL_PAHLAVI;

+ (JavaLangCharacter_UnicodeBlock *)OLD_TURKIC;

+ (JavaLangCharacter_UnicodeBlock *)RUMI_NUMERAL_SYMBOLS;

+ (JavaLangCharacter_UnicodeBlock *)KAITHI;

+ (JavaLangCharacter_UnicodeBlock *)EGYPTIAN_HIEROGLYPHS;

+ (JavaLangCharacter_UnicodeBlock *)ENCLOSED_ALPHANUMERIC_SUPPLEMENT;

+ (JavaLangCharacter_UnicodeBlock *)ENCLOSED_IDEOGRAPHIC_SUPPLEMENT;

+ (JavaLangCharacter_UnicodeBlock *)CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C;

+ (JavaLangCharacter_UnicodeBlock *)MANDAIC;

+ (JavaLangCharacter_UnicodeBlock *)BATAK;

+ (JavaLangCharacter_UnicodeBlock *)ETHIOPIC_EXTENDED_A;

+ (JavaLangCharacter_UnicodeBlock *)BRAHMI;

+ (JavaLangCharacter_UnicodeBlock *)BAMUM_SUPPLEMENT;

+ (JavaLangCharacter_UnicodeBlock *)KANA_SUPPLEMENT;

+ (JavaLangCharacter_UnicodeBlock *)PLAYING_CARDS;

+ (JavaLangCharacter_UnicodeBlock *)MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS;

+ (JavaLangCharacter_UnicodeBlock *)EMOTICONS;

+ (JavaLangCharacter_UnicodeBlock *)TRANSPORT_AND_MAP_SYMBOLS;

+ (JavaLangCharacter_UnicodeBlock *)ALCHEMICAL_SYMBOLS;

+ (JavaLangCharacter_UnicodeBlock *)CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D;

#pragma mark Public

/*!
 @brief Returns the Unicode block for the given block name, or null if there is no
 such block.
 <p>Block names may be one of the following:
 <ul>
 <li>Canonical block name, as defined by the Unicode specification;
 case-insensitive.</li>
 <li>Canonical block name without any spaces, as defined by the
 Unicode specification; case-insensitive.</li>
 <li>A <code>UnicodeBlock</code> constant identifier. This is determined by
 converting the canonical name to uppercase and replacing all spaces and hyphens
 with underscores.</li>
 </ul>
 @throws NullPointerException
 if <code>blockName == null</code>.
 @throws IllegalArgumentException
 if <code>blockName</code> is not the name of any known block.
 @since 1.5
 */
+ (JavaLangCharacter_UnicodeBlock *)forNameWithNSString:(NSString *)blockName;

/*!
 @brief Returns the Unicode block containing the given code point, or null if the
 code point does not belong to any known block.
 */
+ (JavaLangCharacter_UnicodeBlock *)ofWithChar:(jchar)c;

/*!
 @brief Returns the Unicode block containing the given code point, or null if the
 code point does not belong to any known block.
 */
+ (JavaLangCharacter_UnicodeBlock *)ofWithInt:(jint)codePoint;

@end

J2OBJC_STATIC_INIT(JavaLangCharacter_UnicodeBlock)

/*!
 @brief The Surrogates Area Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_SURROGATES_AREA();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SURROGATES_AREA;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, SURROGATES_AREA, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Basic Latin Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_BASIC_LATIN();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_BASIC_LATIN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, BASIC_LATIN, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Latin-1 Supplement Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_LATIN_1_SUPPLEMENT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_LATIN_1_SUPPLEMENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, LATIN_1_SUPPLEMENT, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Latin Extended-A Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_LATIN_EXTENDED_A();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_LATIN_EXTENDED_A;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, LATIN_EXTENDED_A, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Latin Extended-B Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_LATIN_EXTENDED_B();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_LATIN_EXTENDED_B;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, LATIN_EXTENDED_B, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The IPA Extensions Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_IPA_EXTENSIONS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_IPA_EXTENSIONS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, IPA_EXTENSIONS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Spacing Modifier Letters Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_SPACING_MODIFIER_LETTERS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SPACING_MODIFIER_LETTERS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, SPACING_MODIFIER_LETTERS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Combining Diacritical Marks Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_COMBINING_DIACRITICAL_MARKS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_COMBINING_DIACRITICAL_MARKS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, COMBINING_DIACRITICAL_MARKS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Greek and Coptic Unicode block.
 Previously referred to as Greek.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_GREEK();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_GREEK;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, GREEK, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Cyrillic Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_CYRILLIC();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CYRILLIC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, CYRILLIC, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Cyrillic Supplement Unicode block.
 Previously referred to as Cyrillic Supplementary.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_CYRILLIC_SUPPLEMENTARY();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CYRILLIC_SUPPLEMENTARY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, CYRILLIC_SUPPLEMENTARY, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Armenian Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_ARMENIAN();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ARMENIAN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, ARMENIAN, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Hebrew Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_HEBREW();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_HEBREW;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, HEBREW, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Arabic Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_ARABIC();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ARABIC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, ARABIC, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Syriac Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_SYRIAC();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SYRIAC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, SYRIAC, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Thaana Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_THAANA();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_THAANA;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, THAANA, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Devanagari Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_DEVANAGARI();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_DEVANAGARI;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, DEVANAGARI, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Bengali Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_BENGALI();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_BENGALI;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, BENGALI, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Gurmukhi Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_GURMUKHI();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_GURMUKHI;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, GURMUKHI, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Gujarati Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_GUJARATI();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_GUJARATI;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, GUJARATI, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Oriya Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_ORIYA();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ORIYA;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, ORIYA, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Tamil Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_TAMIL();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_TAMIL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, TAMIL, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Telugu Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_TELUGU();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_TELUGU;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, TELUGU, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Kannada Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_KANNADA();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_KANNADA;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, KANNADA, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Malayalam Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_MALAYALAM();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_MALAYALAM;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, MALAYALAM, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Sinhala Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_SINHALA();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SINHALA;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, SINHALA, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Thai Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_THAI();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_THAI;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, THAI, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Lao Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_LAO();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_LAO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, LAO, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Tibetan Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_TIBETAN();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_TIBETAN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, TIBETAN, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Myanmar Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_MYANMAR();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_MYANMAR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, MYANMAR, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Georgian Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_GEORGIAN();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_GEORGIAN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, GEORGIAN, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Hangul Jamo Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_HANGUL_JAMO();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_HANGUL_JAMO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, HANGUL_JAMO, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Ethiopic Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_ETHIOPIC();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ETHIOPIC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, ETHIOPIC, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Cherokee Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_CHEROKEE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CHEROKEE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, CHEROKEE, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Unified Canadian Aboriginal Syllabics Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Ogham Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_OGHAM();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_OGHAM;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, OGHAM, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Runic Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_RUNIC();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_RUNIC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, RUNIC, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Tagalog Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_TAGALOG();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_TAGALOG;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, TAGALOG, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Hanunoo Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_HANUNOO();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_HANUNOO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, HANUNOO, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Buhid Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_BUHID();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_BUHID;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, BUHID, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Tagbanwa Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_TAGBANWA();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_TAGBANWA;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, TAGBANWA, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Khmer Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_KHMER();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_KHMER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, KHMER, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Mongolian Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_MONGOLIAN();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_MONGOLIAN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, MONGOLIAN, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Limbu Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_LIMBU();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_LIMBU;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, LIMBU, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Tai Le Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_TAI_LE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_TAI_LE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, TAI_LE, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Khmer Symbols Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_KHMER_SYMBOLS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_KHMER_SYMBOLS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, KHMER_SYMBOLS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Phonetic Extensions Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_PHONETIC_EXTENSIONS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_PHONETIC_EXTENSIONS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, PHONETIC_EXTENSIONS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Latin Extended Additional Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_LATIN_EXTENDED_ADDITIONAL();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_LATIN_EXTENDED_ADDITIONAL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, LATIN_EXTENDED_ADDITIONAL, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Greek Extended Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_GREEK_EXTENDED();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_GREEK_EXTENDED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, GREEK_EXTENDED, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The General Punctuation Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_GENERAL_PUNCTUATION();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_GENERAL_PUNCTUATION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, GENERAL_PUNCTUATION, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Superscripts and Subscripts Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_SUPERSCRIPTS_AND_SUBSCRIPTS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SUPERSCRIPTS_AND_SUBSCRIPTS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, SUPERSCRIPTS_AND_SUBSCRIPTS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Currency Symbols Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_CURRENCY_SYMBOLS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CURRENCY_SYMBOLS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, CURRENCY_SYMBOLS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Combining Diacritical Marks for Symbols Unicode
 Block.
 Previously referred to as Combining Marks for
 Symbols.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_COMBINING_MARKS_FOR_SYMBOLS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_COMBINING_MARKS_FOR_SYMBOLS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, COMBINING_MARKS_FOR_SYMBOLS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Letterlike Symbols Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_LETTERLIKE_SYMBOLS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_LETTERLIKE_SYMBOLS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, LETTERLIKE_SYMBOLS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Number Forms Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_NUMBER_FORMS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_NUMBER_FORMS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, NUMBER_FORMS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Arrows Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_ARROWS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ARROWS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, ARROWS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Mathematical Operators Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_MATHEMATICAL_OPERATORS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_MATHEMATICAL_OPERATORS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, MATHEMATICAL_OPERATORS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Miscellaneous Technical Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_MISCELLANEOUS_TECHNICAL();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_MISCELLANEOUS_TECHNICAL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, MISCELLANEOUS_TECHNICAL, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Control Pictures Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_CONTROL_PICTURES();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CONTROL_PICTURES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, CONTROL_PICTURES, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Optical Character Recognition Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_OPTICAL_CHARACTER_RECOGNITION();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_OPTICAL_CHARACTER_RECOGNITION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, OPTICAL_CHARACTER_RECOGNITION, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Enclosed Alphanumerics Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_ENCLOSED_ALPHANUMERICS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ENCLOSED_ALPHANUMERICS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, ENCLOSED_ALPHANUMERICS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Box Drawing Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_BOX_DRAWING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_BOX_DRAWING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, BOX_DRAWING, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Block Elements Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_BLOCK_ELEMENTS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_BLOCK_ELEMENTS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, BLOCK_ELEMENTS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Geometric Shapes Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_GEOMETRIC_SHAPES();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_GEOMETRIC_SHAPES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, GEOMETRIC_SHAPES, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Miscellaneous Symbols Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_MISCELLANEOUS_SYMBOLS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_MISCELLANEOUS_SYMBOLS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, MISCELLANEOUS_SYMBOLS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Dingbats Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_DINGBATS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_DINGBATS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, DINGBATS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Miscellaneous Mathematical Symbols-A Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Supplemental Arrows-A Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_SUPPLEMENTAL_ARROWS_A();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SUPPLEMENTAL_ARROWS_A;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, SUPPLEMENTAL_ARROWS_A, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Braille Patterns Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_BRAILLE_PATTERNS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_BRAILLE_PATTERNS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, BRAILLE_PATTERNS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Supplemental Arrows-B Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_SUPPLEMENTAL_ARROWS_B();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SUPPLEMENTAL_ARROWS_B;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, SUPPLEMENTAL_ARROWS_B, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Miscellaneous Mathematical Symbols-B Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Supplemental Mathematical Operators Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_SUPPLEMENTAL_MATHEMATICAL_OPERATORS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SUPPLEMENTAL_MATHEMATICAL_OPERATORS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, SUPPLEMENTAL_MATHEMATICAL_OPERATORS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Miscellaneous Symbols and Arrows Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_MISCELLANEOUS_SYMBOLS_AND_ARROWS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_MISCELLANEOUS_SYMBOLS_AND_ARROWS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, MISCELLANEOUS_SYMBOLS_AND_ARROWS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The CJK Radicals Supplement Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_CJK_RADICALS_SUPPLEMENT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CJK_RADICALS_SUPPLEMENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, CJK_RADICALS_SUPPLEMENT, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Kangxi Radicals Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_KANGXI_RADICALS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_KANGXI_RADICALS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, KANGXI_RADICALS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Ideographic Description Characters Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_IDEOGRAPHIC_DESCRIPTION_CHARACTERS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_IDEOGRAPHIC_DESCRIPTION_CHARACTERS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, IDEOGRAPHIC_DESCRIPTION_CHARACTERS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The CJK Symbols and Punctuation Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_CJK_SYMBOLS_AND_PUNCTUATION();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CJK_SYMBOLS_AND_PUNCTUATION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, CJK_SYMBOLS_AND_PUNCTUATION, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Hiragana Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_HIRAGANA();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_HIRAGANA;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, HIRAGANA, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Katakana Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_KATAKANA();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_KATAKANA;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, KATAKANA, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Bopomofo Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_BOPOMOFO();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_BOPOMOFO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, BOPOMOFO, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Hangul Compatibility Jamo Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_HANGUL_COMPATIBILITY_JAMO();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_HANGUL_COMPATIBILITY_JAMO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, HANGUL_COMPATIBILITY_JAMO, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Kanbun Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_KANBUN();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_KANBUN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, KANBUN, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Bopomofo Extended Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_BOPOMOFO_EXTENDED();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_BOPOMOFO_EXTENDED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, BOPOMOFO_EXTENDED, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Katakana Phonetic Extensions Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_KATAKANA_PHONETIC_EXTENSIONS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_KATAKANA_PHONETIC_EXTENSIONS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, KATAKANA_PHONETIC_EXTENSIONS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Enclosed CJK Letters and Months Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_ENCLOSED_CJK_LETTERS_AND_MONTHS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ENCLOSED_CJK_LETTERS_AND_MONTHS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, ENCLOSED_CJK_LETTERS_AND_MONTHS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The CJK Compatibility Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_CJK_COMPATIBILITY();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CJK_COMPATIBILITY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, CJK_COMPATIBILITY, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The CJK Unified Ideographs Extension A Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Yijing Hexagram Symbols Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_YIJING_HEXAGRAM_SYMBOLS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_YIJING_HEXAGRAM_SYMBOLS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, YIJING_HEXAGRAM_SYMBOLS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The CJK Unified Ideographs Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_CJK_UNIFIED_IDEOGRAPHS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CJK_UNIFIED_IDEOGRAPHS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, CJK_UNIFIED_IDEOGRAPHS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Yi Syllables Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_YI_SYLLABLES();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_YI_SYLLABLES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, YI_SYLLABLES, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Yi Radicals Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_YI_RADICALS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_YI_RADICALS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, YI_RADICALS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Hangul Syllables Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_HANGUL_SYLLABLES();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_HANGUL_SYLLABLES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, HANGUL_SYLLABLES, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The High Surrogates Unicode block.
 This block represents
 code point values in the high surrogate range 0xD800 to 0xDB7F
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_HIGH_SURROGATES();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_HIGH_SURROGATES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, HIGH_SURROGATES, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The High Private Use Surrogates Unicode block.
 This block
 represents code point values in the high surrogate range 0xDB80 to
 0xDBFF
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_HIGH_PRIVATE_USE_SURROGATES();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_HIGH_PRIVATE_USE_SURROGATES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, HIGH_PRIVATE_USE_SURROGATES, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Low Surrogates Unicode block.
 This block represents
 code point values in the low surrogate range 0xDC00 to 0xDFFF
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_LOW_SURROGATES();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_LOW_SURROGATES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, LOW_SURROGATES, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Private Use Area Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_PRIVATE_USE_AREA();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_PRIVATE_USE_AREA;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, PRIVATE_USE_AREA, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The CJK Compatibility Ideographs Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_CJK_COMPATIBILITY_IDEOGRAPHS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CJK_COMPATIBILITY_IDEOGRAPHS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, CJK_COMPATIBILITY_IDEOGRAPHS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Alphabetic Presentation Forms Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_ALPHABETIC_PRESENTATION_FORMS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ALPHABETIC_PRESENTATION_FORMS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, ALPHABETIC_PRESENTATION_FORMS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Arabic Presentation Forms-A Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_ARABIC_PRESENTATION_FORMS_A();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ARABIC_PRESENTATION_FORMS_A;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, ARABIC_PRESENTATION_FORMS_A, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Variation Selectors Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_VARIATION_SELECTORS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_VARIATION_SELECTORS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, VARIATION_SELECTORS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Combining Half Marks Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_COMBINING_HALF_MARKS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_COMBINING_HALF_MARKS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, COMBINING_HALF_MARKS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The CJK Compatibility Forms Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_CJK_COMPATIBILITY_FORMS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CJK_COMPATIBILITY_FORMS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, CJK_COMPATIBILITY_FORMS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Small Form Variants Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_SMALL_FORM_VARIANTS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SMALL_FORM_VARIANTS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, SMALL_FORM_VARIANTS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Arabic Presentation Forms-B Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_ARABIC_PRESENTATION_FORMS_B();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ARABIC_PRESENTATION_FORMS_B;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, ARABIC_PRESENTATION_FORMS_B, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Halfwidth and Fullwidth Forms Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_HALFWIDTH_AND_FULLWIDTH_FORMS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_HALFWIDTH_AND_FULLWIDTH_FORMS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, HALFWIDTH_AND_FULLWIDTH_FORMS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Specials Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_SPECIALS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SPECIALS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, SPECIALS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Linear B Syllabary Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_LINEAR_B_SYLLABARY();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_LINEAR_B_SYLLABARY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, LINEAR_B_SYLLABARY, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Linear B Ideograms Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_LINEAR_B_IDEOGRAMS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_LINEAR_B_IDEOGRAMS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, LINEAR_B_IDEOGRAMS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Aegean Numbers Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_AEGEAN_NUMBERS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_AEGEAN_NUMBERS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, AEGEAN_NUMBERS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Old Italic Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_OLD_ITALIC();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_OLD_ITALIC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, OLD_ITALIC, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Gothic Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_GOTHIC();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_GOTHIC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, GOTHIC, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Ugaritic Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_UGARITIC();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_UGARITIC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, UGARITIC, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Deseret Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_DESERET();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_DESERET;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, DESERET, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Shavian Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_SHAVIAN();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SHAVIAN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, SHAVIAN, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Osmanya Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_OSMANYA();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_OSMANYA;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, OSMANYA, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Cypriot Syllabary Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_CYPRIOT_SYLLABARY();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CYPRIOT_SYLLABARY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, CYPRIOT_SYLLABARY, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Byzantine Musical Symbols Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_BYZANTINE_MUSICAL_SYMBOLS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_BYZANTINE_MUSICAL_SYMBOLS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, BYZANTINE_MUSICAL_SYMBOLS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Musical Symbols Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_MUSICAL_SYMBOLS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_MUSICAL_SYMBOLS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, MUSICAL_SYMBOLS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Tai Xuan Jing Symbols Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_TAI_XUAN_JING_SYMBOLS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_TAI_XUAN_JING_SYMBOLS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, TAI_XUAN_JING_SYMBOLS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Mathematical Alphanumeric Symbols Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_MATHEMATICAL_ALPHANUMERIC_SYMBOLS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_MATHEMATICAL_ALPHANUMERIC_SYMBOLS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, MATHEMATICAL_ALPHANUMERIC_SYMBOLS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The CJK Unified Ideographs Extension B Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The CJK Compatibility Ideographs Supplement Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Tags Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_TAGS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_TAGS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, TAGS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Variation Selectors Supplement Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_VARIATION_SELECTORS_SUPPLEMENT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_VARIATION_SELECTORS_SUPPLEMENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, VARIATION_SELECTORS_SUPPLEMENT, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Supplementary Private Use Area-A Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_SUPPLEMENTARY_PRIVATE_USE_AREA_A();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SUPPLEMENTARY_PRIVATE_USE_AREA_A;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, SUPPLEMENTARY_PRIVATE_USE_AREA_A, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Supplementary Private Use Area-B Unicode block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_SUPPLEMENTARY_PRIVATE_USE_AREA_B();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SUPPLEMENTARY_PRIVATE_USE_AREA_B;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, SUPPLEMENTARY_PRIVATE_USE_AREA_B, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Ancient Greek Musical Notation Unicode 4.1 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_ANCIENT_GREEK_MUSICAL_NOTATION();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ANCIENT_GREEK_MUSICAL_NOTATION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, ANCIENT_GREEK_MUSICAL_NOTATION, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Ancient Greek Numbers Unicode 4.1 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_ANCIENT_GREEK_NUMBERS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ANCIENT_GREEK_NUMBERS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, ANCIENT_GREEK_NUMBERS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Arabic Supplement Unicode 4.1 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_ARABIC_SUPPLEMENT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ARABIC_SUPPLEMENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, ARABIC_SUPPLEMENT, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Buginese Unicode 4.1 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_BUGINESE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_BUGINESE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, BUGINESE, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The CJK Strokes Unicode 4.1 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_CJK_STROKES();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CJK_STROKES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, CJK_STROKES, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Combining Diacritical Marks Supplement Unicode 4.1 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_COMBINING_DIACRITICAL_MARKS_SUPPLEMENT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_COMBINING_DIACRITICAL_MARKS_SUPPLEMENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, COMBINING_DIACRITICAL_MARKS_SUPPLEMENT, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Coptic Unicode 4.1 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_COPTIC();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_COPTIC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, COPTIC, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Ethiopic Extended Unicode 4.1 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_ETHIOPIC_EXTENDED();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ETHIOPIC_EXTENDED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, ETHIOPIC_EXTENDED, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Ethiopic Supplement Unicode 4.1 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_ETHIOPIC_SUPPLEMENT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ETHIOPIC_SUPPLEMENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, ETHIOPIC_SUPPLEMENT, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Georgian Supplement Unicode 4.1 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_GEORGIAN_SUPPLEMENT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_GEORGIAN_SUPPLEMENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, GEORGIAN_SUPPLEMENT, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Glagolitic Unicode 4.1 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_GLAGOLITIC();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_GLAGOLITIC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, GLAGOLITIC, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Kharoshthi Unicode 4.1 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_KHAROSHTHI();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_KHAROSHTHI;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, KHAROSHTHI, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Modifier Tone Letters Unicode 4.1 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_MODIFIER_TONE_LETTERS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_MODIFIER_TONE_LETTERS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, MODIFIER_TONE_LETTERS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The New Tai Lue Unicode 4.1 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_NEW_TAI_LUE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_NEW_TAI_LUE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, NEW_TAI_LUE, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Old Persian Unicode 4.1 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_OLD_PERSIAN();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_OLD_PERSIAN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, OLD_PERSIAN, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Phonetic Extensions Supplement Unicode 4.1 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_PHONETIC_EXTENSIONS_SUPPLEMENT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_PHONETIC_EXTENSIONS_SUPPLEMENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, PHONETIC_EXTENSIONS_SUPPLEMENT, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Supplemental Punctuation Unicode 4.1 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_SUPPLEMENTAL_PUNCTUATION();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SUPPLEMENTAL_PUNCTUATION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, SUPPLEMENTAL_PUNCTUATION, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Syloti Nagri Unicode 4.1 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_SYLOTI_NAGRI();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SYLOTI_NAGRI;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, SYLOTI_NAGRI, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Tifinagh Unicode 4.1 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_TIFINAGH();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_TIFINAGH;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, TIFINAGH, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Vertical Forms Unicode 4.1 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_VERTICAL_FORMS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_VERTICAL_FORMS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, VERTICAL_FORMS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The NKo Unicode 5.0 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_NKO();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_NKO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, NKO, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Balinese Unicode 5.0 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_BALINESE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_BALINESE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, BALINESE, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Latin Extended C Unicode 5.0 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_LATIN_EXTENDED_C();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_LATIN_EXTENDED_C;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, LATIN_EXTENDED_C, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Latin Extended D Unicode 5.0 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_LATIN_EXTENDED_D();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_LATIN_EXTENDED_D;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, LATIN_EXTENDED_D, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Phags-pa Unicode 5.0 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_PHAGS_PA();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_PHAGS_PA;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, PHAGS_PA, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Phoenician Unicode 5.0 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_PHOENICIAN();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_PHOENICIAN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, PHOENICIAN, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Cuneiform Unicode 5.0 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_CUNEIFORM();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CUNEIFORM;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, CUNEIFORM, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Cuneiform Numbers And Punctuation Unicode 5.0 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_CUNEIFORM_NUMBERS_AND_PUNCTUATION();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CUNEIFORM_NUMBERS_AND_PUNCTUATION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, CUNEIFORM_NUMBERS_AND_PUNCTUATION, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Counting Rod Numerals Unicode 5.0 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_COUNTING_ROD_NUMERALS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_COUNTING_ROD_NUMERALS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, COUNTING_ROD_NUMERALS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Sudanese Unicode 5.1 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_SUNDANESE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SUNDANESE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, SUNDANESE, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Lepcha Unicode 5.1 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_LEPCHA();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_LEPCHA;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, LEPCHA, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Ol Chiki Unicode 5.1 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_OL_CHIKI();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_OL_CHIKI;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, OL_CHIKI, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Cyrillic Extended-A Unicode 5.1 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_CYRILLIC_EXTENDED_A();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CYRILLIC_EXTENDED_A;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, CYRILLIC_EXTENDED_A, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Vai Unicode 5.1 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_VAI();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_VAI;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, VAI, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Cyrillic Extended-B Unicode 5.1 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_CYRILLIC_EXTENDED_B();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CYRILLIC_EXTENDED_B;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, CYRILLIC_EXTENDED_B, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Saurashtra Unicode 5.1 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_SAURASHTRA();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SAURASHTRA;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, SAURASHTRA, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Kayah Li Unicode 5.1 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_KAYAH_LI();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_KAYAH_LI;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, KAYAH_LI, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Rejang Unicode 5.1 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_REJANG();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_REJANG;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, REJANG, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Cham Unicode 5.1 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_CHAM();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CHAM;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, CHAM, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Ancient Symbols Unicode 5.1 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_ANCIENT_SYMBOLS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ANCIENT_SYMBOLS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, ANCIENT_SYMBOLS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Phaistos Disc Unicode 5.1 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_PHAISTOS_DISC();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_PHAISTOS_DISC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, PHAISTOS_DISC, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Lycian Unicode 5.1 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_LYCIAN();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_LYCIAN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, LYCIAN, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Carian Unicode 5.1 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_CARIAN();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CARIAN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, CARIAN, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Lydian Unicode 5.1 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_LYDIAN();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_LYDIAN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, LYDIAN, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Mahjong Tiles Unicode 5.1 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_MAHJONG_TILES();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_MAHJONG_TILES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, MAHJONG_TILES, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Domino Tiles Unicode 5.1 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_DOMINO_TILES();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_DOMINO_TILES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, DOMINO_TILES, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Samaritan Unicode 5.2 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_SAMARITAN();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SAMARITAN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, SAMARITAN, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Unified Canadian Aboriginal Syllabics Expanded Unicode 5.2 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Tai Tham Unicode 5.2 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_TAI_THAM();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_TAI_THAM;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, TAI_THAM, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Vedic Extensions Unicode 5.2 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_VEDIC_EXTENSIONS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_VEDIC_EXTENSIONS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, VEDIC_EXTENSIONS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Lisu Extensions Unicode 5.2 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_LISU();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_LISU;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, LISU, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Bamum Extensions Unicode 5.2 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_BAMUM();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_BAMUM;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, BAMUM, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Common Indic Number Forms Unicode 5.2 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_COMMON_INDIC_NUMBER_FORMS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_COMMON_INDIC_NUMBER_FORMS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, COMMON_INDIC_NUMBER_FORMS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Devanagari Extended Unicode 5.2 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_DEVANAGARI_EXTENDED();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_DEVANAGARI_EXTENDED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, DEVANAGARI_EXTENDED, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Hangul Jamo Extended-A Unicode 5.2 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_HANGUL_JAMO_EXTENDED_A();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_HANGUL_JAMO_EXTENDED_A;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, HANGUL_JAMO_EXTENDED_A, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Javanese Unicode 5.2 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_JAVANESE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_JAVANESE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, JAVANESE, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Myanmar Extended-A Unicode 5.2 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_MYANMAR_EXTENDED_A();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_MYANMAR_EXTENDED_A;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, MYANMAR_EXTENDED_A, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Tai Viet Unicode 5.2 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_TAI_VIET();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_TAI_VIET;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, TAI_VIET, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Meetei Mayek Unicode 5.2 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_MEETEI_MAYEK();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_MEETEI_MAYEK;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, MEETEI_MAYEK, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Hangul Jamo Extended-B Unicode 5.2 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_HANGUL_JAMO_EXTENDED_B();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_HANGUL_JAMO_EXTENDED_B;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, HANGUL_JAMO_EXTENDED_B, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Imperial Aramaic Unicode 5.2 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_IMPERIAL_ARAMAIC();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_IMPERIAL_ARAMAIC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, IMPERIAL_ARAMAIC, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Old South Arabian Unicode 5.2 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_OLD_SOUTH_ARABIAN();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_OLD_SOUTH_ARABIAN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, OLD_SOUTH_ARABIAN, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Avestan Unicode 5.2 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_AVESTAN();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_AVESTAN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, AVESTAN, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Inscriptional Pathian Unicode 5.2 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_INSCRIPTIONAL_PARTHIAN();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_INSCRIPTIONAL_PARTHIAN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, INSCRIPTIONAL_PARTHIAN, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Inscriptional Pahlavi Unicode 5.2 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_INSCRIPTIONAL_PAHLAVI();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_INSCRIPTIONAL_PAHLAVI;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, INSCRIPTIONAL_PAHLAVI, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Old Turkic Unicode 5.2 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_OLD_TURKIC();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_OLD_TURKIC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, OLD_TURKIC, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Rumi Numeral Symbols Unicode 5.2 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_RUMI_NUMERAL_SYMBOLS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_RUMI_NUMERAL_SYMBOLS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, RUMI_NUMERAL_SYMBOLS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Kaithi Unicode 5.2 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_KAITHI();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_KAITHI;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, KAITHI, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Egyptian Hieroglyphs Unicode 5.2 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_EGYPTIAN_HIEROGLYPHS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_EGYPTIAN_HIEROGLYPHS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, EGYPTIAN_HIEROGLYPHS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Enclosed Alphanumeric Supplement Unicode 5.2 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_ENCLOSED_ALPHANUMERIC_SUPPLEMENT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ENCLOSED_ALPHANUMERIC_SUPPLEMENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, ENCLOSED_ALPHANUMERIC_SUPPLEMENT, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Enclosed Ideographic Supplement Unicode 5.2 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_ENCLOSED_IDEOGRAPHIC_SUPPLEMENT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ENCLOSED_IDEOGRAPHIC_SUPPLEMENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, ENCLOSED_IDEOGRAPHIC_SUPPLEMENT, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The CJK Unified Ideographs Unicode 5.2 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Mandaic Unicode 6.0 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_MANDAIC();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_MANDAIC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, MANDAIC, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Batak Unicode 6.0 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_BATAK();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_BATAK;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, BATAK, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Ethiopic Extended-A Unicode 6.0 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_ETHIOPIC_EXTENDED_A();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ETHIOPIC_EXTENDED_A;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, ETHIOPIC_EXTENDED_A, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Brahmi Unicode 6.0 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_BRAHMI();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_BRAHMI;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, BRAHMI, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Bamum Supplement Unicode 6.0 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_BAMUM_SUPPLEMENT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_BAMUM_SUPPLEMENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, BAMUM_SUPPLEMENT, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Kana Supplement Unicode 6.0 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_KANA_SUPPLEMENT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_KANA_SUPPLEMENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, KANA_SUPPLEMENT, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Playing Cards Supplement Unicode 6.0 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_PLAYING_CARDS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_PLAYING_CARDS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, PLAYING_CARDS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Miscellaneous Symbols And Pictographs Supplement Unicode 6.0 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Emoticons Unicode 6.0 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_EMOTICONS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_EMOTICONS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, EMOTICONS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Transport And Map Symbols Unicode 6.0 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_TRANSPORT_AND_MAP_SYMBOLS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_TRANSPORT_AND_MAP_SYMBOLS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, TRANSPORT_AND_MAP_SYMBOLS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The Alchemical Symbols Unicode 6.0 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_ALCHEMICAL_SYMBOLS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ALCHEMICAL_SYMBOLS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, ALCHEMICAL_SYMBOLS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief The CJK Unified Ideographs Extension-D Unicode 6.0 block.
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_forNameWithNSString_(NSString *blockName);

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ofWithChar_(jchar c);

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ofWithInt_(jint codePoint);

J2OBJC_TYPE_LITERAL_HEADER(JavaLangCharacter_UnicodeBlock)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaLangCharacter")
