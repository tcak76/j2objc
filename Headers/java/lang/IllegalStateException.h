//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/lang/IllegalStateException.java
//

#include "../../J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaLangIllegalStateException")
#ifdef RESTRICT_JavaLangIllegalStateException
#define INCLUDE_ALL_JavaLangIllegalStateException 0
#else
#define INCLUDE_ALL_JavaLangIllegalStateException 1
#endif
#undef RESTRICT_JavaLangIllegalStateException

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaLangIllegalStateException_) && (INCLUDE_ALL_JavaLangIllegalStateException || defined(INCLUDE_JavaLangIllegalStateException))
#define JavaLangIllegalStateException_

#define RESTRICT_JavaLangRuntimeException 1
#define INCLUDE_JavaLangRuntimeException 1
#include "../../java/lang/RuntimeException.h"

/*!
 @brief Thrown when an action is attempted at a time when the VM is not
 in the correct state.
 */
@interface JavaLangIllegalStateException : JavaLangRuntimeException

#pragma mark Public

/*!
 @brief Constructs a new <code>IllegalStateException</code> that includes the current
 stack trace.
 */
- (instancetype)init;

/*!
 @brief Constructs a new <code>IllegalStateException</code> with the current stack
 trace and the specified detail message.
 @param detailMessage
 the detail message for this exception.
 */
- (instancetype)initWithNSString:(NSString *)detailMessage;

/*!
 @brief Constructs a new <code>IllegalStateException</code> with the current stack
 trace, the specified detail message and the specified cause.
 @param message
 the detail message for this exception.
 @param cause
 the cause of this exception.
 @since 1.5
 */
- (instancetype)initWithNSString:(NSString *)message
                 withNSException:(NSException *)cause;

/*!
 @brief Constructs a new <code>IllegalStateException</code> with the current stack
 trace and the specified cause.
 @param cause
 the cause of this exception, may be <code>null</code>.
 @since 1.5
 */
- (instancetype)initWithNSException:(NSException *)cause;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaLangIllegalStateException)

FOUNDATION_EXPORT void JavaLangIllegalStateException_init(JavaLangIllegalStateException *self);

FOUNDATION_EXPORT JavaLangIllegalStateException *new_JavaLangIllegalStateException_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaLangIllegalStateException *create_JavaLangIllegalStateException_init();

FOUNDATION_EXPORT void JavaLangIllegalStateException_initWithNSString_(JavaLangIllegalStateException *self, NSString *detailMessage);

FOUNDATION_EXPORT JavaLangIllegalStateException *new_JavaLangIllegalStateException_initWithNSString_(NSString *detailMessage) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaLangIllegalStateException *create_JavaLangIllegalStateException_initWithNSString_(NSString *detailMessage);

FOUNDATION_EXPORT void JavaLangIllegalStateException_initWithNSString_withNSException_(JavaLangIllegalStateException *self, NSString *message, NSException *cause);

FOUNDATION_EXPORT JavaLangIllegalStateException *new_JavaLangIllegalStateException_initWithNSString_withNSException_(NSString *message, NSException *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaLangIllegalStateException *create_JavaLangIllegalStateException_initWithNSString_withNSException_(NSString *message, NSException *cause);

FOUNDATION_EXPORT void JavaLangIllegalStateException_initWithNSException_(JavaLangIllegalStateException *self, NSException *cause);

FOUNDATION_EXPORT JavaLangIllegalStateException *new_JavaLangIllegalStateException_initWithNSException_(NSException *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaLangIllegalStateException *create_JavaLangIllegalStateException_initWithNSException_(NSException *cause);

J2OBJC_TYPE_LITERAL_HEADER(JavaLangIllegalStateException)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaLangIllegalStateException")
