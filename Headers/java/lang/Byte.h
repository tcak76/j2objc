//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/lang/Byte.java
//

#include "../../J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaLangByte")
#ifdef RESTRICT_JavaLangByte
#define INCLUDE_ALL_JavaLangByte 0
#else
#define INCLUDE_ALL_JavaLangByte 1
#endif
#undef RESTRICT_JavaLangByte

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaLangByte_) && (INCLUDE_ALL_JavaLangByte || defined(INCLUDE_JavaLangByte))
#define JavaLangByte_

#define RESTRICT_JavaLangComparable 1
#define INCLUDE_JavaLangComparable 1
#include "../../java/lang/Comparable.h"

@class IOSClass;

/*!
 @brief The wrapper for the primitive type <code>byte</code>.
 @since 1.1
 */
@interface JavaLangByte : NSNumber < JavaLangComparable >

+ (jbyte)MAX_VALUE;

+ (jbyte)MIN_VALUE;

+ (jint)SIZE;

+ (IOSClass *)TYPE;

#pragma mark Public

/*!
 @brief Constructs a new <code>Byte</code> with the specified primitive byte value.
 @param value
 the primitive byte value to store in the new instance.
 */
- (instancetype)initWithByte:(jbyte)value;

/*!
 @brief Constructs a new <code>Byte</code> from the specified string.
 @param string
 the string representation of a single byte value.
 @throws NumberFormatException
 if <code>string</code> cannot be parsed as a byte value.
 - seealso: #parseByte(String)
 */
- (instancetype)initWithNSString:(NSString *)string;

/*!
 @brief Gets the primitive value of this byte.
 @return this object's primitive value.
 */
- (jbyte)charValue;

/*!
 @brief Compares two <code>byte</code> values.
 @return 0 if lhs = rhs, less than 0 if lhs &lt; rhs, and greater than 0 if lhs &gt; rhs.
 @since 1.7
 */
+ (jint)compareWithByte:(jbyte)lhs
               withByte:(jbyte)rhs;

/*!
 @brief Compares this object to the specified byte object to determine their
 relative order.
 @param object
 the byte object to compare this object to.
 @return a negative value if the value of this byte is less than the value
 of <code>object</code>; 0 if the value of this byte and the value of
 <code>object</code> are equal; a positive value if the value of this
 byte is greater than the value of <code>object</code>.
 - seealso: java.lang.Comparable
 @since 1.2
 */
- (jint)compareToWithId:(JavaLangByte *)object;

/*!
 @brief Parses the specified string and returns a <code>Byte</code> instance if the
 string can be decoded into a single byte value.
 The string may be an
 optional minus sign "-" followed by a hexadecimal ("0x..." or "#..."),
 octal ("0..."), or decimal ("...") representation of a byte.
 @param string
 a string representation of a single byte value.
 @return a <code>Byte</code> containing the value represented by <code>string</code>.
 @throws NumberFormatException
 if <code>string</code> cannot be parsed as a byte value.
 */
+ (JavaLangByte *)decodeWithNSString:(NSString *)string;

- (jdouble)doubleValue;

/*!
 @brief Compares this object with the specified object and indicates if they are
 equal.
 In order to be equal, <code>object</code> must be an instance of
 <code>Byte</code> and have the same byte value as this object.
 @param object
 the object to compare this byte with.
 @return <code>true</code> if the specified object is equal to this
 <code>Byte</code>; <code>false</code> otherwise.
 */
- (jboolean)isEqual:(id)object;

- (jfloat)floatValue;

- (NSUInteger)hash;

- (jint)intValue;

- (jlong)longLongValue;

/*!
 @brief Parses the specified string as a signed decimal byte value.
 The ASCII
 character \u002d ('-') is recognized as the minus sign.
 @param string
 the string representation of a single byte value.
 @return the primitive byte value represented by <code>string</code>.
 @throws NumberFormatException
 if <code>string</code> can not be parsed as a byte value.
 */
+ (jbyte)parseByteWithNSString:(NSString *)string;

/*!
 @brief Parses the specified string as a signed byte value using the specified
 radix.
 The ASCII character \u002d ('-') is recognized as the minus sign.
 @param string
 the string representation of a single byte value.
 @param radix
 the radix to use when parsing.
 @return the primitive byte value represented by <code>string</code> using
 <code>radix</code>.
 @throws NumberFormatException
 if <code>string</code> can not be parsed as a byte value, or
 <code>radix < Character.MIN_RADIX ||
 radix > Character.MAX_RADIX</code>
 .
 */
+ (jbyte)parseByteWithNSString:(NSString *)string
                       withInt:(jint)radix;

- (jshort)shortValue;

/*!
 @brief Returns a two-digit hex string.
 That is, -1 becomes "ff" or "FF" and 2 becomes "02".
  internal use only
 */
+ (NSString *)toHexStringWithByte:(jbyte)b
                      withBoolean:(jboolean)upperCase;

- (NSString *)description;

/*!
 @brief Returns a string containing a concise, human-readable description of the
 specified byte value.
 @param value
 the byte to convert to a string.
 @return a printable representation of <code>value</code>.
 */
+ (NSString *)toStringWithByte:(jbyte)value;

/*!
 @brief Returns a <code>Byte</code> instance for the specified byte value.
 <p>
 If it is not necessary to get a new <code>Byte</code> instance, it is
 recommended to use this method instead of the constructor, since it
 maintains a cache of instances which may result in better performance.
 @param b
 the byte value to store in the instance.
 @return a <code>Byte</code> instance containing <code>b</code>.
 @since 1.5
 */
+ (JavaLangByte *)valueOfWithByte:(jbyte)b;

/*!
 @brief Parses the specified string as a signed decimal byte value.
 @param string
 the string representation of a single byte value.
 @return a <code>Byte</code> instance containing the byte value represented by
 <code>string</code>.
 @throws NumberFormatException
 if <code>string</code> can not be parsed as a byte value.
 - seealso: #parseByte(String)
 */
+ (JavaLangByte *)valueOfWithNSString:(NSString *)string;

/*!
 @brief Parses the specified string as a signed byte value using the specified
 radix.
 @param string
 the string representation of a single byte value.
 @param radix
 the radix to use when parsing.
 @return a <code>Byte</code> instance containing the byte value represented by
 <code>string</code> using <code>radix</code>.
 @throws NumberFormatException
 if <code>string</code> can not be parsed as a byte value, or
 <code>radix < Character.MIN_RADIX ||
 radix > Character.MAX_RADIX</code>
 .
 - seealso: #parseByte(String,int)
 */
+ (JavaLangByte *)valueOfWithNSString:(NSString *)string
                              withInt:(jint)radix;

#pragma mark Package-Private

@end

J2OBJC_STATIC_INIT(JavaLangByte)

/*!
 @brief The maximum <code>Byte</code> value, 2<sup>7</sup>-1.
 */
inline jbyte JavaLangByte_get_MAX_VALUE();
#define JavaLangByte_MAX_VALUE 127
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangByte, MAX_VALUE, jbyte)

/*!
 @brief The minimum <code>Byte</code> value, -2<sup>7</sup>.
 */
inline jbyte JavaLangByte_get_MIN_VALUE();
#define JavaLangByte_MIN_VALUE -128
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangByte, MIN_VALUE, jbyte)

/*!
 @brief The number of bits needed to represent a <code>Byte</code> value in two's
 complement form.
 @since 1.5
 */
inline jint JavaLangByte_get_SIZE();
#define JavaLangByte_SIZE 8
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangByte, SIZE, jint)

/*!
 @brief The <code>Class</code> object that represents the primitive type <code>byte</code>.
 */
inline IOSClass *JavaLangByte_get_TYPE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSClass *JavaLangByte_TYPE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangByte, TYPE, IOSClass *)

FOUNDATION_EXPORT void JavaLangByte_initWithByte_(JavaLangByte *self, jbyte value);

FOUNDATION_EXPORT JavaLangByte *new_JavaLangByte_initWithByte_(jbyte value) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaLangByte *create_JavaLangByte_initWithByte_(jbyte value);

FOUNDATION_EXPORT void JavaLangByte_initWithNSString_(JavaLangByte *self, NSString *string);

FOUNDATION_EXPORT JavaLangByte *new_JavaLangByte_initWithNSString_(NSString *string) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaLangByte *create_JavaLangByte_initWithNSString_(NSString *string);

FOUNDATION_EXPORT jint JavaLangByte_compareWithByte_withByte_(jbyte lhs, jbyte rhs);

FOUNDATION_EXPORT JavaLangByte *JavaLangByte_decodeWithNSString_(NSString *string);

FOUNDATION_EXPORT jbyte JavaLangByte_parseByteWithNSString_(NSString *string);

FOUNDATION_EXPORT jbyte JavaLangByte_parseByteWithNSString_withInt_(NSString *string, jint radix);

FOUNDATION_EXPORT NSString *JavaLangByte_toHexStringWithByte_withBoolean_(jbyte b, jboolean upperCase);

FOUNDATION_EXPORT NSString *JavaLangByte_toStringWithByte_(jbyte value);

FOUNDATION_EXPORT JavaLangByte *JavaLangByte_valueOfWithNSString_(NSString *string);

FOUNDATION_EXPORT JavaLangByte *JavaLangByte_valueOfWithNSString_withInt_(NSString *string, jint radix);

FOUNDATION_EXPORT JavaLangByte *JavaLangByte_valueOfWithByte_(jbyte b);

J2OBJC_TYPE_LITERAL_HEADER(JavaLangByte)

BOXED_INC_AND_DEC(Byte, charValue, JavaLangByte)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaLangByte")
