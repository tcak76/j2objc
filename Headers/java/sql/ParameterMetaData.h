//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/sql/ParameterMetaData.java
//

#include "../../J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaSqlParameterMetaData")
#ifdef RESTRICT_JavaSqlParameterMetaData
#define INCLUDE_ALL_JavaSqlParameterMetaData 0
#else
#define INCLUDE_ALL_JavaSqlParameterMetaData 1
#endif
#undef RESTRICT_JavaSqlParameterMetaData

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaSqlParameterMetaData_) && (INCLUDE_ALL_JavaSqlParameterMetaData || defined(INCLUDE_JavaSqlParameterMetaData))
#define JavaSqlParameterMetaData_

#define RESTRICT_JavaSqlWrapper 1
#define INCLUDE_JavaSqlWrapper 1
#include "../../java/sql/Wrapper.h"

/*!
 @brief An interface used to get information about the types and properties of
 parameters in a <code>PreparedStatement</code>.
 */
@protocol JavaSqlParameterMetaData < JavaSqlWrapper, NSObject, JavaObject >

/*!
 @brief Gets the fully-qualified name of the Java class which should be passed as
 a parameter to the method <code>PreparedStatement.setObject</code>.
 @param paramIndex
 the index number of the parameter, where the first parameter
 has index 1.
 @return the fully qualified Java class name of the parameter with the
 specified index. This class name is used for custom mapping
 between SQL types and Java objects.
 @throws SQLException
 if a database error happens.
 */
- (NSString *)getParameterClassNameWithInt:(jint)paramIndex;

/*!
 @brief Gets the number of parameters in the <code>PreparedStatement</code> for which
 this <code>ParameterMetaData</code> contains information.
 @return the number of parameters.
 @throws SQLException
 if a database error happens.
 */
- (jint)getParameterCount;

/*!
 @brief Gets the mode of the specified parameter.
 Can be one of:
 <ul>
 <li>ParameterMetaData.parameterModeIn</li>
 <li>ParameterMetaData.parameterModeOut</li>
 <li>ParameterMetaData.parameterModeInOut</li>
 <li>ParameterMetaData.parameterModeUnknown</li>
 </ul>
 @param paramIndex
 the index number of the parameter, where the first parameter
 has index 1.
 @return the parameter's mode.
 @throws SQLException
 if a database error happens.
 */
- (jint)getParameterModeWithInt:(jint)paramIndex;

/*!
 @brief Gets the SQL type of a specified parameter.
 @param paramIndex
 the index number of the parameter, where the first parameter
 has index 1.
 @return the SQL type of the parameter as defined in <code>java.sql.Types</code>
 .
 @throws SQLException
 if a database error happens.
 */
- (jint)getParameterTypeWithInt:(jint)paramIndex;

/*!
 @brief Gets the database-specific type name of a specified parameter.
 @param paramIndex
 the index number of the parameter, where the first parameter
 has index 1.
 @return the type name for the parameter as used by the database. A
 fully-qualified name is returned if the parameter is a <i>User
 Defined Type</i> (UDT).
 @throws SQLException
 if a database error happens.
 */
- (NSString *)getParameterTypeNameWithInt:(jint)paramIndex;

/*!
 @brief Gets the number of decimal digits for a specified parameter.
 @param paramIndex
 the index number of the parameter, where the first parameter
 has index 1.
 @return the number of decimal digits ("the precision") for the parameter.
 <code>0</code> if the parameter is not a numeric type.
 @throws SQLException
 if a database error happens.
 */
- (jint)getPrecisionWithInt:(jint)paramIndex;

/*!
 @brief Gets the number of digits after the decimal point for a specified
 parameter.
 @param paramIndex
 the index number of the parameter, where the first parameter
 has index 1.
 @return the number of digits after the decimal point ("the scale") for
 the parameter. <code>0</code> if the parameter is not a numeric type.
 @throws SQLException
 if a database error happens.
 */
- (jint)getScaleWithInt:(jint)paramIndex;

/*!
 @brief Gets whether <code>null</code> values are allowed for the specified parameter.
 The returned value is one of:
 <ul>
 <li>ParameterMetaData.parameterNoNulls</li>
 <li>ParameterMetaData.parameterNullable</li>
 <li>ParameterMetaData.parameterNullableUnknown</li>
 </ul>
 @param paramIndex
 the index number of the parameter, where the first parameter
 has index 1.
 @return the int code indicating the nullability of the parameter.
 @throws SQLException
 if a database error is encountered.
 */
- (jint)isNullableWithInt:(jint)paramIndex;

/*!
 @brief Gets whether values for the specified parameter can be signed numbers.
 @param paramIndex
 the index number of the parameter, where the first parameter
 has index 1.
 @return <code>true</code> if values can be signed numbers for this parameter,
 <code>false</code> otherwise.
 @throws SQLException
 if a database error happens.
 */
- (jboolean)isSignedWithInt:(jint)paramIndex;

@end

@interface JavaSqlParameterMetaData : NSObject

+ (jint)parameterModeIn;

+ (jint)parameterModeInOut;

+ (jint)parameterModeOut;

+ (jint)parameterModeUnknown;

+ (jint)parameterNoNulls;

+ (jint)parameterNullable;

+ (jint)parameterNullableUnknown;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSqlParameterMetaData)

/*!
 @brief Indicates that the parameter mode is <code>IN</code>.
 */
inline jint JavaSqlParameterMetaData_get_parameterModeIn();
#define JavaSqlParameterMetaData_parameterModeIn 1
J2OBJC_STATIC_FIELD_CONSTANT(JavaSqlParameterMetaData, parameterModeIn, jint)

/*!
 @brief Indicates that the parameter mode is <code>INOUT</code>.
 */
inline jint JavaSqlParameterMetaData_get_parameterModeInOut();
#define JavaSqlParameterMetaData_parameterModeInOut 2
J2OBJC_STATIC_FIELD_CONSTANT(JavaSqlParameterMetaData, parameterModeInOut, jint)

/*!
 @brief Indicates that the parameter mode is <code>OUT</code>.
 */
inline jint JavaSqlParameterMetaData_get_parameterModeOut();
#define JavaSqlParameterMetaData_parameterModeOut 4
J2OBJC_STATIC_FIELD_CONSTANT(JavaSqlParameterMetaData, parameterModeOut, jint)

/*!
 @brief Indicates that the parameter mode is not known.
 */
inline jint JavaSqlParameterMetaData_get_parameterModeUnknown();
#define JavaSqlParameterMetaData_parameterModeUnknown 0
J2OBJC_STATIC_FIELD_CONSTANT(JavaSqlParameterMetaData, parameterModeUnknown, jint)

/*!
 @brief Indicates that a parameter is not permitted to be <code>NULL</code>.
 */
inline jint JavaSqlParameterMetaData_get_parameterNoNulls();
#define JavaSqlParameterMetaData_parameterNoNulls 0
J2OBJC_STATIC_FIELD_CONSTANT(JavaSqlParameterMetaData, parameterNoNulls, jint)

/*!
 @brief Indicates that a parameter is permitted to be <code>NULL</code>.
 */
inline jint JavaSqlParameterMetaData_get_parameterNullable();
#define JavaSqlParameterMetaData_parameterNullable 1
J2OBJC_STATIC_FIELD_CONSTANT(JavaSqlParameterMetaData, parameterNullable, jint)

/*!
 @brief Indicates that whether a parameter is allowed to be <code>null</code> or not
 is not known.
 */
inline jint JavaSqlParameterMetaData_get_parameterNullableUnknown();
#define JavaSqlParameterMetaData_parameterNullableUnknown 2
J2OBJC_STATIC_FIELD_CONSTANT(JavaSqlParameterMetaData, parameterNullableUnknown, jint)

J2OBJC_TYPE_LITERAL_HEADER(JavaSqlParameterMetaData)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaSqlParameterMetaData")
