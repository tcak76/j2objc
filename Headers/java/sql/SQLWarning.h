//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/sql/SQLWarning.java
//

#include "../../J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaSqlSQLWarning")
#ifdef RESTRICT_JavaSqlSQLWarning
#define INCLUDE_ALL_JavaSqlSQLWarning 0
#else
#define INCLUDE_ALL_JavaSqlSQLWarning 1
#endif
#undef RESTRICT_JavaSqlSQLWarning

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaSqlSQLWarning_) && (INCLUDE_ALL_JavaSqlSQLWarning || defined(INCLUDE_JavaSqlSQLWarning))
#define JavaSqlSQLWarning_

#define RESTRICT_JavaSqlSQLException 1
#define INCLUDE_JavaSqlSQLException 1
#include "../../java/sql/SQLException.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "../../java/io/Serializable.h"

/*!
 @brief An exception class that holds information about Database access warnings.
 */
@interface JavaSqlSQLWarning : JavaSqlSQLException < JavaIoSerializable >

#pragma mark Public

/*!
 @brief Creates an <code>SQLWarning</code> object.
 The reason string is set to <code>null</code>
 , the <code>SQLState</code> string is set to <code>null</code> and the error
 code is set to 0.
 */
- (instancetype)init;

/*!
 @brief Creates an <code>SQLWarning</code> object.
 The reason string is set to the
 given reason string, the <code>SQLState</code> string is set to <code>null</code>
 and the error code is set to 0.
 @param theReason
 the reason why this warning is issued.
 */
- (instancetype)initWithNSString:(NSString *)theReason;

/*!
 @brief Creates an <code>SQLWarning</code> object.
 The reason string is set to the
 given reason string, the <code>SQLState</code> string is set to the given
 <code>SQLState</code> string and the error code is set to 0.
 @param theReason
 the reason why this warning is issued.
 @param theSQLState
 the string to use as the <code>SQLState</code> string.
 */
- (instancetype)initWithNSString:(NSString *)theReason
                    withNSString:(NSString *)theSQLState;

/*!
 @brief Creates an <code>SQLWarning</code> object.
 The reason string is set to the
 given reason string, the <code>SQLState</code> string is set to the given
 <code>SQLState</code> string and the error code is set to the given error code
 value.
 @param theReason
 the reason why this warning is issued.
 @param theSQLState
 the X/Open standard specifc error code.
 @param theErrorCode
 a vendor specific error code.
 */
- (instancetype)initWithNSString:(NSString *)theReason
                    withNSString:(NSString *)theSQLState
                         withInt:(jint)theErrorCode;

/*!
 @brief Creates an SQLWarning object.
 The Reason string is set to reason, the
 SQLState string is set to given SQLState and the Error Code is set to
 vendorCode, cause is set to the given cause
 @since 1.6
 */
- (instancetype)initWithNSString:(NSString *)reason
                    withNSString:(NSString *)SQLState
                         withInt:(jint)vendorCode
                 withNSException:(NSException *)cause;

/*!
 @brief Creates an SQLWarning object.
 The Reason string is set to reason, the
 SQLState string is set to given SQLState and the Error Code is set to 0,
 cause is set to the given cause
 @since 1.6
 */
- (instancetype)initWithNSString:(NSString *)reason
                    withNSString:(NSString *)SQLState
                 withNSException:(NSException *)cause;

/*!
 @brief Creates an SQLWarning object.
 The Reason string is set to reason, the
 SQLState string is set to null and the Error Code is set to 0, cause is
 set to the given cause
 @since 1.6
 */
- (instancetype)initWithNSString:(NSString *)reason
                 withNSException:(NSException *)cause;

/*!
 @brief Creates an SQLWarning object.
 The Reason string is set to null, the
 SQLState string is set to null and the Error Code is set to 0, cause is
 set to cause.
 @since 1.6
 */
- (instancetype)initWithNSException:(NSException *)cause;

/*!
 @brief Gets the next <code>SQLWarning</code> chained to this <code>SQLWarning</code> object.
 @return the <code>SQLWarning</code> chained to this <code>SQLWarning</code>.
 <code>null</code> if no <code>SQLWarning</code> is chained to this <code>SQLWarning</code>
 .
 */
- (JavaSqlSQLWarning *)getNextWarning;

/*!
 @brief Chains a supplied <code>SQLWarning</code> to this <code>SQLWarning</code>.
 @param w
 the <code>SQLWarning</code> linked to this <code>SQLWarning</code>.
 */
- (void)setNextWarningWithJavaSqlSQLWarning:(JavaSqlSQLWarning *)w;

#pragma mark Package-Private

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSqlSQLWarning)

FOUNDATION_EXPORT void JavaSqlSQLWarning_init(JavaSqlSQLWarning *self);

FOUNDATION_EXPORT JavaSqlSQLWarning *new_JavaSqlSQLWarning_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSqlSQLWarning *create_JavaSqlSQLWarning_init();

FOUNDATION_EXPORT void JavaSqlSQLWarning_initWithNSString_(JavaSqlSQLWarning *self, NSString *theReason);

FOUNDATION_EXPORT JavaSqlSQLWarning *new_JavaSqlSQLWarning_initWithNSString_(NSString *theReason) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSqlSQLWarning *create_JavaSqlSQLWarning_initWithNSString_(NSString *theReason);

FOUNDATION_EXPORT void JavaSqlSQLWarning_initWithNSString_withNSString_(JavaSqlSQLWarning *self, NSString *theReason, NSString *theSQLState);

FOUNDATION_EXPORT JavaSqlSQLWarning *new_JavaSqlSQLWarning_initWithNSString_withNSString_(NSString *theReason, NSString *theSQLState) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSqlSQLWarning *create_JavaSqlSQLWarning_initWithNSString_withNSString_(NSString *theReason, NSString *theSQLState);

FOUNDATION_EXPORT void JavaSqlSQLWarning_initWithNSString_withNSString_withInt_(JavaSqlSQLWarning *self, NSString *theReason, NSString *theSQLState, jint theErrorCode);

FOUNDATION_EXPORT JavaSqlSQLWarning *new_JavaSqlSQLWarning_initWithNSString_withNSString_withInt_(NSString *theReason, NSString *theSQLState, jint theErrorCode) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSqlSQLWarning *create_JavaSqlSQLWarning_initWithNSString_withNSString_withInt_(NSString *theReason, NSString *theSQLState, jint theErrorCode);

FOUNDATION_EXPORT void JavaSqlSQLWarning_initWithNSException_(JavaSqlSQLWarning *self, NSException *cause);

FOUNDATION_EXPORT JavaSqlSQLWarning *new_JavaSqlSQLWarning_initWithNSException_(NSException *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSqlSQLWarning *create_JavaSqlSQLWarning_initWithNSException_(NSException *cause);

FOUNDATION_EXPORT void JavaSqlSQLWarning_initWithNSString_withNSException_(JavaSqlSQLWarning *self, NSString *reason, NSException *cause);

FOUNDATION_EXPORT JavaSqlSQLWarning *new_JavaSqlSQLWarning_initWithNSString_withNSException_(NSString *reason, NSException *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSqlSQLWarning *create_JavaSqlSQLWarning_initWithNSString_withNSException_(NSString *reason, NSException *cause);

FOUNDATION_EXPORT void JavaSqlSQLWarning_initWithNSString_withNSString_withNSException_(JavaSqlSQLWarning *self, NSString *reason, NSString *SQLState, NSException *cause);

FOUNDATION_EXPORT JavaSqlSQLWarning *new_JavaSqlSQLWarning_initWithNSString_withNSString_withNSException_(NSString *reason, NSString *SQLState, NSException *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSqlSQLWarning *create_JavaSqlSQLWarning_initWithNSString_withNSString_withNSException_(NSString *reason, NSString *SQLState, NSException *cause);

FOUNDATION_EXPORT void JavaSqlSQLWarning_initWithNSString_withNSString_withInt_withNSException_(JavaSqlSQLWarning *self, NSString *reason, NSString *SQLState, jint vendorCode, NSException *cause);

FOUNDATION_EXPORT JavaSqlSQLWarning *new_JavaSqlSQLWarning_initWithNSString_withNSString_withInt_withNSException_(NSString *reason, NSString *SQLState, jint vendorCode, NSException *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSqlSQLWarning *create_JavaSqlSQLWarning_initWithNSString_withNSString_withInt_withNSException_(NSString *reason, NSString *SQLState, jint vendorCode, NSException *cause);

J2OBJC_TYPE_LITERAL_HEADER(JavaSqlSQLWarning)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaSqlSQLWarning")
