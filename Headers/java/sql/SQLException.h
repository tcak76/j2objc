//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/sql/SQLException.java
//

#include "../../J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaSqlSQLException")
#ifdef RESTRICT_JavaSqlSQLException
#define INCLUDE_ALL_JavaSqlSQLException 0
#else
#define INCLUDE_ALL_JavaSqlSQLException 1
#endif
#undef RESTRICT_JavaSqlSQLException

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaSqlSQLException_) && (INCLUDE_ALL_JavaSqlSQLException || defined(INCLUDE_JavaSqlSQLException))
#define JavaSqlSQLException_

#define RESTRICT_JavaLangException 1
#define INCLUDE_JavaLangException 1
#include "../../java/lang/Exception.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "../../java/io/Serializable.h"

#define RESTRICT_JavaLangIterable 1
#define INCLUDE_JavaLangIterable 1
#include "../../java/lang/Iterable.h"

@protocol JavaUtilIterator;

/*!
 @brief An exception that indicates a failed JDBC operation.
 It provides the following information about problems encountered with
 database access:
 <ul>
 <li>A message string.</li>
 <li>A <code>SQLState</code> error description string following either
 <a href="http://en.wikipedia.org/wiki/SQL:1999">SQL 99</a> or X/OPEN <code>SQLState</code>
 conventions. <code>DatabaseMetaData.getSQLStateType</code> exposes the specific convention in
 use.</li>
 <li>A database-specific error code.</li>
 <li>The next exception in the chain.</li>
 </ul>
 - seealso: DatabaseMetaData
 */
@interface JavaSqlSQLException : JavaLangException < JavaIoSerializable, JavaLangIterable >

#pragma mark Public

/*!
 @brief Creates an <code>SQLException</code> object.
 The reason string is set to
 <code>null</code>, the <code>SQLState</code> string is set to <code>null</code> and the
 error code is set to 0.
 */
- (instancetype)init;

/*!
 @brief Creates an <code>SQLException</code> object.
 The reason string is set to the given
 reason string, the <code>SQLState</code> string is set to <code>null</code> and the error code is
 set to 0.
 @param theReason
 the string to use as the Reason string
 */
- (instancetype)initWithNSString:(NSString *)theReason;

/*!
 @brief Creates an <code>SQLException</code> object.
 The reason string is set to the
 given reason string, the <code>SQLState</code> string is set to the given
 <code>SQLState</code> string and the error code is set to 0.
 @param theReason
 the string to use as the reason string.
 @param theSQLState
 the string to use as the <code>SQLState</code> string.
 */
- (instancetype)initWithNSString:(NSString *)theReason
                    withNSString:(NSString *)theSQLState;

/*!
 @brief Creates an <code>SQLException</code> object.
 The reason string is set to the
 given reason string, the <code>SQLState</code> string is set to the given
 <code>SQLState</code> string and the error code is set to the given error code
 value.
 @param theReason
 the string to use as the reason string.
 @param theSQLState
 the string to use as the <code>SQLState</code> string.
 @param theErrorCode
 the integer value for the error code.
 */
- (instancetype)initWithNSString:(NSString *)theReason
                    withNSString:(NSString *)theSQLState
                         withInt:(jint)theErrorCode;

/*!
 @brief Creates an SQLException object.
 The Reason string is set to the given
 reason string, the SQLState string is set to the given SQLState string ,
 the Error Code is set to the given error code value, and the cause
 Throwable object is set to the given cause Throwable object.
 @param theReason
 the string to use as the Reason string
 @param theSQLState
 the string to use as the SQLState string
 @param theErrorCode
 the integer value for the error code
 @param theCause
 the Throwable object for the underlying reason this
 SQLException
 @since 1.6
 */
- (instancetype)initWithNSString:(NSString *)theReason
                    withNSString:(NSString *)theSQLState
                         withInt:(jint)theErrorCode
                 withNSException:(NSException *)theCause;

/*!
 @brief Creates an SQLException object.
 The Reason string is set to the given
 reason string, the SQLState string is set to the given SQLState string
 and the cause Throwable object is set to the given cause Throwable
 object.
 @param theReason
 the string to use as the Reason string
 @param theSQLState
 the string to use as the SQLState string
 @param theCause
 the Throwable object for the underlying reason this
 SQLException
 @since 1.6
 */
- (instancetype)initWithNSString:(NSString *)theReason
                    withNSString:(NSString *)theSQLState
                 withNSException:(NSException *)theCause;

/*!
 @brief Creates an SQLException object.
 The Reason string is set to the given and
 the cause Throwable object is set to the given cause Throwable object.
 @param theReason
 the string to use as the Reason string
 @param theCause
 the Throwable object for the underlying reason this
 SQLException
 @since 1.6
 */
- (instancetype)initWithNSString:(NSString *)theReason
                 withNSException:(NSException *)theCause;

/*!
 @brief Creates an SQLException object.
 The Reason string is set to the null if
 cause == null or cause.toString() if cause!=null,and the cause Throwable
 object is set to the given cause Throwable object.
 @param theCause
 the Throwable object for the underlying reason this
 SQLException
 @since 1.6
 */
- (instancetype)initWithNSException:(NSException *)theCause;

/*!
 @brief Returns the integer error code for this <code>SQLException</code>.
 @return The integer error code for this <code>SQLException</code>. The meaning
 of the code is specific to the vendor of the database.
 */
- (jint)getErrorCode;

/*!
 @brief Retrieves the <code>SQLException</code> chained to this <code>SQLException</code>,
 if any.
 @return The <code>SQLException</code> chained to this <code>SQLException</code>.
 <code>null</code> if there is no <code>SQLException</code> chained to this
 <code>SQLException</code>.
 */
- (JavaSqlSQLException *)getNextException;

/*!
 @brief Retrieves the <code>SQLState</code> description string for this <code>SQLException</code>
  object.
 @return The <code>SQLState</code> string for this <code>SQLException</code> object.
 This is an error description string which follows either the SQL
 99 conventions or the X/OPEN <code>SQLstate</code> conventions. The
 potential values of the <code>SQLState</code> string are described in
 each of the specifications. Which of the conventions is being
 used by the <code>SQLState</code> string can be discovered by using
 the <code>getSQLStateType</code> method of the <code>DatabaseMetaData</code>
  interface.
 */
- (NSString *)getSQLState;

/*!
 @brief Obsolete.
 <code>getCause()</code> should be used instead of this iterator. Returns an iterator
 over the exceptions added with <code>setNextException</code>.
 */
- (id<JavaUtilIterator>)iterator;

/*!
 @brief Obsolete.
 Appends <code>ex</code> to the end of this chain.
 */
- (void)setNextExceptionWithJavaSqlSQLException:(JavaSqlSQLException *)ex;

#pragma mark Package-Private

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSqlSQLException)

FOUNDATION_EXPORT void JavaSqlSQLException_init(JavaSqlSQLException *self);

FOUNDATION_EXPORT JavaSqlSQLException *new_JavaSqlSQLException_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSqlSQLException *create_JavaSqlSQLException_init();

FOUNDATION_EXPORT void JavaSqlSQLException_initWithNSString_(JavaSqlSQLException *self, NSString *theReason);

FOUNDATION_EXPORT JavaSqlSQLException *new_JavaSqlSQLException_initWithNSString_(NSString *theReason) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSqlSQLException *create_JavaSqlSQLException_initWithNSString_(NSString *theReason);

FOUNDATION_EXPORT void JavaSqlSQLException_initWithNSString_withNSString_(JavaSqlSQLException *self, NSString *theReason, NSString *theSQLState);

FOUNDATION_EXPORT JavaSqlSQLException *new_JavaSqlSQLException_initWithNSString_withNSString_(NSString *theReason, NSString *theSQLState) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSqlSQLException *create_JavaSqlSQLException_initWithNSString_withNSString_(NSString *theReason, NSString *theSQLState);

FOUNDATION_EXPORT void JavaSqlSQLException_initWithNSString_withNSString_withInt_(JavaSqlSQLException *self, NSString *theReason, NSString *theSQLState, jint theErrorCode);

FOUNDATION_EXPORT JavaSqlSQLException *new_JavaSqlSQLException_initWithNSString_withNSString_withInt_(NSString *theReason, NSString *theSQLState, jint theErrorCode) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSqlSQLException *create_JavaSqlSQLException_initWithNSString_withNSString_withInt_(NSString *theReason, NSString *theSQLState, jint theErrorCode);

FOUNDATION_EXPORT void JavaSqlSQLException_initWithNSException_(JavaSqlSQLException *self, NSException *theCause);

FOUNDATION_EXPORT JavaSqlSQLException *new_JavaSqlSQLException_initWithNSException_(NSException *theCause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSqlSQLException *create_JavaSqlSQLException_initWithNSException_(NSException *theCause);

FOUNDATION_EXPORT void JavaSqlSQLException_initWithNSString_withNSException_(JavaSqlSQLException *self, NSString *theReason, NSException *theCause);

FOUNDATION_EXPORT JavaSqlSQLException *new_JavaSqlSQLException_initWithNSString_withNSException_(NSString *theReason, NSException *theCause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSqlSQLException *create_JavaSqlSQLException_initWithNSString_withNSException_(NSString *theReason, NSException *theCause);

FOUNDATION_EXPORT void JavaSqlSQLException_initWithNSString_withNSString_withNSException_(JavaSqlSQLException *self, NSString *theReason, NSString *theSQLState, NSException *theCause);

FOUNDATION_EXPORT JavaSqlSQLException *new_JavaSqlSQLException_initWithNSString_withNSString_withNSException_(NSString *theReason, NSString *theSQLState, NSException *theCause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSqlSQLException *create_JavaSqlSQLException_initWithNSString_withNSString_withNSException_(NSString *theReason, NSString *theSQLState, NSException *theCause);

FOUNDATION_EXPORT void JavaSqlSQLException_initWithNSString_withNSString_withInt_withNSException_(JavaSqlSQLException *self, NSString *theReason, NSString *theSQLState, jint theErrorCode, NSException *theCause);

FOUNDATION_EXPORT JavaSqlSQLException *new_JavaSqlSQLException_initWithNSString_withNSString_withInt_withNSException_(NSString *theReason, NSString *theSQLState, jint theErrorCode, NSException *theCause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSqlSQLException *create_JavaSqlSQLException_initWithNSString_withNSString_withInt_withNSException_(NSString *theReason, NSString *theSQLState, jint theErrorCode, NSException *theCause);

J2OBJC_TYPE_LITERAL_HEADER(JavaSqlSQLException)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaSqlSQLException")
