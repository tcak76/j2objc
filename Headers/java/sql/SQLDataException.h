//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/sql/SQLDataException.java
//

#include "../../J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaSqlSQLDataException")
#ifdef RESTRICT_JavaSqlSQLDataException
#define INCLUDE_ALL_JavaSqlSQLDataException 0
#else
#define INCLUDE_ALL_JavaSqlSQLDataException 1
#endif
#undef RESTRICT_JavaSqlSQLDataException

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaSqlSQLDataException_) && (INCLUDE_ALL_JavaSqlSQLDataException || defined(INCLUDE_JavaSqlSQLDataException))
#define JavaSqlSQLDataException_

#define RESTRICT_JavaSqlSQLNonTransientException 1
#define INCLUDE_JavaSqlSQLNonTransientException 1
#include "../../java/sql/SQLNonTransientException.h"

/*!
 @brief An exception, which is subclass of SQLException, is thrown when various data
 errors arise.
 These errors including division by 0 and invalid arguments to
 functions
 */
@interface JavaSqlSQLDataException : JavaSqlSQLNonTransientException

#pragma mark Public

/*!
 @brief Creates an SQLDataException object.
 The Reason string is set to null, the
 SQLState string is set to null and the Error Code is set to 0.
 */
- (instancetype)init;

/*!
 @brief Creates an SQLDataException object.
 The Reason string is set to the given
 reason string, the SQLState string is set to null and the Error Code is
 set to 0.
 @param reason
 the string to use as the Reason string
 */
- (instancetype)initWithNSString:(NSString *)reason;

/*!
 @brief Creates an SQLDataException object.
 The Reason string is set to the given
 reason string, the SQLState string is set to the given SQLState string
 and the Error Code is set to 0.
 @param reason
 the string to use as the Reason string
 @param sqlState
 the string to use as the SQLState string
 */
- (instancetype)initWithNSString:(NSString *)reason
                    withNSString:(NSString *)sqlState;

/*!
 @brief Creates an SQLDataException object.
 The Reason string is set to the given
 reason string, the SQLState string is set to the given SQLState string
 and the Error Code is set to the given error code value.
 @param reason
 the string to use as the Reason string
 @param sqlState
 the string to use as the SQLState string
 @param vendorCode
 the integer value for the error code
 */
- (instancetype)initWithNSString:(NSString *)reason
                    withNSString:(NSString *)sqlState
                         withInt:(jint)vendorCode;

/*!
 @brief Creates an SQLDataException object.
 The Reason string is set to the given
 reason string, the SQLState string is set to the given SQLState string ,
 the Error Code is set to the given error code value, and the cause
 Throwable object is set to the given cause Throwable object.
 @param reason
 the string to use as the Reason string
 @param sqlState
 the string to use as the SQLState string
 @param vendorCode
 the integer value for the error code
 @param cause
 the Throwable object for the underlying reason this
 SQLException
 */
- (instancetype)initWithNSString:(NSString *)reason
                    withNSString:(NSString *)sqlState
                         withInt:(jint)vendorCode
                 withNSException:(NSException *)cause;

/*!
 @brief Creates an SQLDataException object.
 The Reason string is set to the given
 reason string, the SQLState string is set to the given SQLState string
 and the cause Throwable object is set to the given cause Throwable
 object.
 @param reason
 the string to use as the Reason string
 @param sqlState
 the string to use as the SQLState string
 @param cause
 the Throwable object for the underlying reason this
 SQLException
 */
- (instancetype)initWithNSString:(NSString *)reason
                    withNSString:(NSString *)sqlState
                 withNSException:(NSException *)cause;

/*!
 @brief Creates an SQLDataException object.
 The Reason string is set to the given
 and the cause Throwable object is set to the given cause Throwable
 object.
 @param reason
 the string to use as the Reason string
 @param cause
 the Throwable object for the underlying reason this
 SQLException
 */
- (instancetype)initWithNSString:(NSString *)reason
                 withNSException:(NSException *)cause;

/*!
 @brief Creates an SQLDataException object.
 The Reason string is set to the null
 if cause == null or cause.toString() if cause!=null,and the cause
 Throwable object is set to the given cause Throwable object.
 @param cause
 the Throwable object for the underlying reason this
 SQLException
 */
- (instancetype)initWithNSException:(NSException *)cause;

#pragma mark Package-Private

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSqlSQLDataException)

FOUNDATION_EXPORT void JavaSqlSQLDataException_init(JavaSqlSQLDataException *self);

FOUNDATION_EXPORT JavaSqlSQLDataException *new_JavaSqlSQLDataException_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSqlSQLDataException *create_JavaSqlSQLDataException_init();

FOUNDATION_EXPORT void JavaSqlSQLDataException_initWithNSString_(JavaSqlSQLDataException *self, NSString *reason);

FOUNDATION_EXPORT JavaSqlSQLDataException *new_JavaSqlSQLDataException_initWithNSString_(NSString *reason) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSqlSQLDataException *create_JavaSqlSQLDataException_initWithNSString_(NSString *reason);

FOUNDATION_EXPORT void JavaSqlSQLDataException_initWithNSString_withNSString_(JavaSqlSQLDataException *self, NSString *reason, NSString *sqlState);

FOUNDATION_EXPORT JavaSqlSQLDataException *new_JavaSqlSQLDataException_initWithNSString_withNSString_(NSString *reason, NSString *sqlState) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSqlSQLDataException *create_JavaSqlSQLDataException_initWithNSString_withNSString_(NSString *reason, NSString *sqlState);

FOUNDATION_EXPORT void JavaSqlSQLDataException_initWithNSString_withNSString_withInt_(JavaSqlSQLDataException *self, NSString *reason, NSString *sqlState, jint vendorCode);

FOUNDATION_EXPORT JavaSqlSQLDataException *new_JavaSqlSQLDataException_initWithNSString_withNSString_withInt_(NSString *reason, NSString *sqlState, jint vendorCode) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSqlSQLDataException *create_JavaSqlSQLDataException_initWithNSString_withNSString_withInt_(NSString *reason, NSString *sqlState, jint vendorCode);

FOUNDATION_EXPORT void JavaSqlSQLDataException_initWithNSException_(JavaSqlSQLDataException *self, NSException *cause);

FOUNDATION_EXPORT JavaSqlSQLDataException *new_JavaSqlSQLDataException_initWithNSException_(NSException *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSqlSQLDataException *create_JavaSqlSQLDataException_initWithNSException_(NSException *cause);

FOUNDATION_EXPORT void JavaSqlSQLDataException_initWithNSString_withNSException_(JavaSqlSQLDataException *self, NSString *reason, NSException *cause);

FOUNDATION_EXPORT JavaSqlSQLDataException *new_JavaSqlSQLDataException_initWithNSString_withNSException_(NSString *reason, NSException *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSqlSQLDataException *create_JavaSqlSQLDataException_initWithNSString_withNSException_(NSString *reason, NSException *cause);

FOUNDATION_EXPORT void JavaSqlSQLDataException_initWithNSString_withNSString_withNSException_(JavaSqlSQLDataException *self, NSString *reason, NSString *sqlState, NSException *cause);

FOUNDATION_EXPORT JavaSqlSQLDataException *new_JavaSqlSQLDataException_initWithNSString_withNSString_withNSException_(NSString *reason, NSString *sqlState, NSException *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSqlSQLDataException *create_JavaSqlSQLDataException_initWithNSString_withNSString_withNSException_(NSString *reason, NSString *sqlState, NSException *cause);

FOUNDATION_EXPORT void JavaSqlSQLDataException_initWithNSString_withNSString_withInt_withNSException_(JavaSqlSQLDataException *self, NSString *reason, NSString *sqlState, jint vendorCode, NSException *cause);

FOUNDATION_EXPORT JavaSqlSQLDataException *new_JavaSqlSQLDataException_initWithNSString_withNSString_withInt_withNSException_(NSString *reason, NSString *sqlState, jint vendorCode, NSException *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSqlSQLDataException *create_JavaSqlSQLDataException_initWithNSString_withNSString_withInt_withNSException_(NSString *reason, NSString *sqlState, jint vendorCode, NSException *cause);

J2OBJC_TYPE_LITERAL_HEADER(JavaSqlSQLDataException)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaSqlSQLDataException")
